
canrx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000860  080038d4  080038d4  000138d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004134  08004134  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004134  08004134  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004134  08004134  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004134  08004134  00014134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004138  08004138  00014138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800413c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000052c  20000070  080041ac  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000059c  080041ac  0002059c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbc6  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c8c  00000000  00000000  0002bc5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000910  00000000  00000000  0002d8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000848  00000000  00000000  0002e200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b0f  00000000  00000000  0002ea48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b30d  00000000  00000000  00046557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086383  00000000  00000000  00051864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d7be7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002890  00000000  00000000  000d7c3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080038bc 	.word	0x080038bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080038bc 	.word	0x080038bc

0800014c <HAL_CAN_RxFifo1MsgPendingCallback>:
//CAN_FilterTypeDef sFilterConfig;
//CAN_RxHeaderTypeDef RxHeader;
//uint8_t RxData[8];
//uint8_t delayLED;
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af02      	add	r7, sp, #8
 8000152:	6078      	str	r0, [r7, #4]
  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8000154:	4b4f      	ldr	r3, [pc, #316]	; (8000294 <HAL_CAN_RxFifo1MsgPendingCallback+0x148>)
 8000156:	4a50      	ldr	r2, [pc, #320]	; (8000298 <HAL_CAN_RxFifo1MsgPendingCallback+0x14c>)
 8000158:	2101      	movs	r1, #1
 800015a:	6878      	ldr	r0, [r7, #4]
 800015c:	f001 f888 	bl	8001270 <HAL_CAN_GetRxMessage>
  if (RxHeader.StdId==0x6A5)
 8000160:	4b4d      	ldr	r3, [pc, #308]	; (8000298 <HAL_CAN_RxFifo1MsgPendingCallback+0x14c>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	f240 62a5 	movw	r2, #1701	; 0x6a5
 8000168:	4293      	cmp	r3, r2
 800016a:	d107      	bne.n	800017c <HAL_CAN_RxFifo1MsgPendingCallback+0x30>
  {
  delayLED = RxData[7];  // Nhận giá trị delay mới từ CAN
 800016c:	4b49      	ldr	r3, [pc, #292]	; (8000294 <HAL_CAN_RxFifo1MsgPendingCallback+0x148>)
 800016e:	79da      	ldrb	r2, [r3, #7]
 8000170:	4b4a      	ldr	r3, [pc, #296]	; (800029c <HAL_CAN_RxFifo1MsgPendingCallback+0x150>)
 8000172:	701a      	strb	r2, [r3, #0]
  obstacleSensorValue = RxData[6];
 8000174:	4b47      	ldr	r3, [pc, #284]	; (8000294 <HAL_CAN_RxFifo1MsgPendingCallback+0x148>)
 8000176:	799a      	ldrb	r2, [r3, #6]
 8000178:	4b49      	ldr	r3, [pc, #292]	; (80002a0 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 800017a:	701a      	strb	r2, [r3, #0]
  }
  if (RxHeader.StdId==0x6A6)
 800017c:	4b46      	ldr	r3, [pc, #280]	; (8000298 <HAL_CAN_RxFifo1MsgPendingCallback+0x14c>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	f240 62a6 	movw	r2, #1702	; 0x6a6
 8000184:	4293      	cmp	r3, r2
 8000186:	d10f      	bne.n	80001a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>
  {
  temp = RxData[0];
 8000188:	4b42      	ldr	r3, [pc, #264]	; (8000294 <HAL_CAN_RxFifo1MsgPendingCallback+0x148>)
 800018a:	781a      	ldrb	r2, [r3, #0]
 800018c:	4b45      	ldr	r3, [pc, #276]	; (80002a4 <HAL_CAN_RxFifo1MsgPendingCallback+0x158>)
 800018e:	701a      	strb	r2, [r3, #0]
  level = (RxData[2] << 8) | RxData[3];
 8000190:	4b40      	ldr	r3, [pc, #256]	; (8000294 <HAL_CAN_RxFifo1MsgPendingCallback+0x148>)
 8000192:	789b      	ldrb	r3, [r3, #2]
 8000194:	021b      	lsls	r3, r3, #8
 8000196:	b21a      	sxth	r2, r3
 8000198:	4b3e      	ldr	r3, [pc, #248]	; (8000294 <HAL_CAN_RxFifo1MsgPendingCallback+0x148>)
 800019a:	78db      	ldrb	r3, [r3, #3]
 800019c:	b21b      	sxth	r3, r3
 800019e:	4313      	orrs	r3, r2
 80001a0:	b21b      	sxth	r3, r3
 80001a2:	b29a      	uxth	r2, r3
 80001a4:	4b40      	ldr	r3, [pc, #256]	; (80002a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x15c>)
 80001a6:	801a      	strh	r2, [r3, #0]
  }
  // Kiểm tra nếu giá trị delay thay đổi, thì mới cập nhật màn hình
  if (1)
  {
      // Hiển thị dữ liệu lên OLEDs
      ssd1306_Fill(Black);
 80001a8:	2000      	movs	r0, #0
 80001aa:	f000 fad3 	bl	8000754 <ssd1306_Fill>

      // Dòng 1: Trạng thái xe
      ssd1306_SetCursor(2, 0);
 80001ae:	2100      	movs	r1, #0
 80001b0:	2002      	movs	r0, #2
 80001b2:	f000 fc19 	bl	80009e8 <ssd1306_SetCursor>
      if (obstacleSensorValue == 0)
 80001b6:	4b3a      	ldr	r3, [pc, #232]	; (80002a0 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>)
 80001b8:	781b      	ldrb	r3, [r3, #0]
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d112      	bne.n	80001e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x98>
      {
          ssd1306_WriteString("State: Xe van hanh", Font_7x10, White);
 80001be:	4b3b      	ldr	r3, [pc, #236]	; (80002ac <HAL_CAN_RxFifo1MsgPendingCallback+0x160>)
 80001c0:	2201      	movs	r2, #1
 80001c2:	9200      	str	r2, [sp, #0]
 80001c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80001c6:	483a      	ldr	r0, [pc, #232]	; (80002b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>)
 80001c8:	f000 fbe8 	bl	800099c <ssd1306_WriteString>
          ssd1306_SetCursor(2, 10);
 80001cc:	210a      	movs	r1, #10
 80001ce:	2002      	movs	r0, #2
 80001d0:	f000 fc0a 	bl	80009e8 <ssd1306_SetCursor>
          ssd1306_WriteString("Binh thuong", Font_7x10, White);
 80001d4:	4b35      	ldr	r3, [pc, #212]	; (80002ac <HAL_CAN_RxFifo1MsgPendingCallback+0x160>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	9200      	str	r2, [sp, #0]
 80001da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80001dc:	4835      	ldr	r0, [pc, #212]	; (80002b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x168>)
 80001de:	f000 fbdd 	bl	800099c <ssd1306_WriteString>
 80001e2:	e011      	b.n	8000208 <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>
      }
      else
      {
          ssd1306_WriteString("State: Gap vat can", Font_7x10, White);
 80001e4:	4b31      	ldr	r3, [pc, #196]	; (80002ac <HAL_CAN_RxFifo1MsgPendingCallback+0x160>)
 80001e6:	2201      	movs	r2, #1
 80001e8:	9200      	str	r2, [sp, #0]
 80001ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80001ec:	4832      	ldr	r0, [pc, #200]	; (80002b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x16c>)
 80001ee:	f000 fbd5 	bl	800099c <ssd1306_WriteString>
          ssd1306_SetCursor(2, 10);
 80001f2:	210a      	movs	r1, #10
 80001f4:	2002      	movs	r0, #2
 80001f6:	f000 fbf7 	bl	80009e8 <ssd1306_SetCursor>
          ssd1306_WriteString("Dung xe", Font_7x10, White);
 80001fa:	4b2c      	ldr	r3, [pc, #176]	; (80002ac <HAL_CAN_RxFifo1MsgPendingCallback+0x160>)
 80001fc:	2201      	movs	r2, #1
 80001fe:	9200      	str	r2, [sp, #0]
 8000200:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000202:	482e      	ldr	r0, [pc, #184]	; (80002bc <HAL_CAN_RxFifo1MsgPendingCallback+0x170>)
 8000204:	f000 fbca 	bl	800099c <ssd1306_WriteString>
      }

      // Dòng 2: Mức nhiên liệu
      ssd1306_SetCursor(2, 20);
 8000208:	2114      	movs	r1, #20
 800020a:	2002      	movs	r0, #2
 800020c:	f000 fbec 	bl	80009e8 <ssd1306_SetCursor>
      if (level > 100)
 8000210:	4b25      	ldr	r3, [pc, #148]	; (80002a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x15c>)
 8000212:	881b      	ldrh	r3, [r3, #0]
 8000214:	2b64      	cmp	r3, #100	; 0x64
 8000216:	d912      	bls.n	800023e <HAL_CAN_RxFifo1MsgPendingCallback+0xf2>
      {
          ssd1306_WriteString("Fuel: Du xang", Font_7x10, White);
 8000218:	4b24      	ldr	r3, [pc, #144]	; (80002ac <HAL_CAN_RxFifo1MsgPendingCallback+0x160>)
 800021a:	2201      	movs	r2, #1
 800021c:	9200      	str	r2, [sp, #0]
 800021e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000220:	4827      	ldr	r0, [pc, #156]	; (80002c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x174>)
 8000222:	f000 fbbb 	bl	800099c <ssd1306_WriteString>
          ssd1306_SetCursor(2, 30);
 8000226:	211e      	movs	r1, #30
 8000228:	2002      	movs	r0, #2
 800022a:	f000 fbdd 	bl	80009e8 <ssd1306_SetCursor>
          ssd1306_WriteString("Xe van hanh", Font_7x10, White);
 800022e:	4b1f      	ldr	r3, [pc, #124]	; (80002ac <HAL_CAN_RxFifo1MsgPendingCallback+0x160>)
 8000230:	2201      	movs	r2, #1
 8000232:	9200      	str	r2, [sp, #0]
 8000234:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000236:	4823      	ldr	r0, [pc, #140]	; (80002c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x178>)
 8000238:	f000 fbb0 	bl	800099c <ssd1306_WriteString>
 800023c:	e011      	b.n	8000262 <HAL_CAN_RxFifo1MsgPendingCallback+0x116>
      }
      else
      {
          ssd1306_WriteString("Fuel: Canh bao!", Font_7x10, White);
 800023e:	4b1b      	ldr	r3, [pc, #108]	; (80002ac <HAL_CAN_RxFifo1MsgPendingCallback+0x160>)
 8000240:	2201      	movs	r2, #1
 8000242:	9200      	str	r2, [sp, #0]
 8000244:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000246:	4820      	ldr	r0, [pc, #128]	; (80002c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x17c>)
 8000248:	f000 fba8 	bl	800099c <ssd1306_WriteString>
          ssd1306_SetCursor(2, 30);
 800024c:	211e      	movs	r1, #30
 800024e:	2002      	movs	r0, #2
 8000250:	f000 fbca 	bl	80009e8 <ssd1306_SetCursor>
          ssd1306_WriteString("Sap het xang", Font_7x10, White);
 8000254:	4b15      	ldr	r3, [pc, #84]	; (80002ac <HAL_CAN_RxFifo1MsgPendingCallback+0x160>)
 8000256:	2201      	movs	r2, #1
 8000258:	9200      	str	r2, [sp, #0]
 800025a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800025c:	481b      	ldr	r0, [pc, #108]	; (80002cc <HAL_CAN_RxFifo1MsgPendingCallback+0x180>)
 800025e:	f000 fb9d 	bl	800099c <ssd1306_WriteString>
      }

      // Dòng 3: Mức xăng
      ssd1306_SetCursor(2, 40);
 8000262:	2128      	movs	r1, #40	; 0x28
 8000264:	2002      	movs	r0, #2
 8000266:	f000 fbbf 	bl	80009e8 <ssd1306_SetCursor>
      sprintf(buffer, "Muc xang: %d", level);
 800026a:	4b0f      	ldr	r3, [pc, #60]	; (80002a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x15c>)
 800026c:	881b      	ldrh	r3, [r3, #0]
 800026e:	461a      	mov	r2, r3
 8000270:	4917      	ldr	r1, [pc, #92]	; (80002d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x184>)
 8000272:	4818      	ldr	r0, [pc, #96]	; (80002d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x188>)
 8000274:	f002 ff10 	bl	8003098 <siprintf>
      ssd1306_WriteString(buffer, Font_7x10, White);
 8000278:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <HAL_CAN_RxFifo1MsgPendingCallback+0x160>)
 800027a:	2201      	movs	r2, #1
 800027c:	9200      	str	r2, [sp, #0]
 800027e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000280:	4814      	ldr	r0, [pc, #80]	; (80002d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x188>)
 8000282:	f000 fb8b 	bl	800099c <ssd1306_WriteString>

      ssd1306_UpdateScreen();
 8000286:	f000 fa7d 	bl	8000784 <ssd1306_UpdateScreen>
  }


}
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	20000564 	.word	0x20000564
 8000298:	2000056c 	.word	0x2000056c
 800029c:	200004c8 	.word	0x200004c8
 80002a0:	20000520 	.word	0x20000520
 80002a4:	2000054c 	.word	0x2000054c
 80002a8:	2000054e 	.word	0x2000054e
 80002ac:	080040c8 	.word	0x080040c8
 80002b0:	080038d4 	.word	0x080038d4
 80002b4:	080038e8 	.word	0x080038e8
 80002b8:	080038f4 	.word	0x080038f4
 80002bc:	08003908 	.word	0x08003908
 80002c0:	08003910 	.word	0x08003910
 80002c4:	08003920 	.word	0x08003920
 80002c8:	0800392c 	.word	0x0800392c
 80002cc:	0800393c 	.word	0x0800393c
 80002d0:	0800394c 	.word	0x0800394c
 80002d4:	20000550 	.word	0x20000550

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002dc:	f000 fd3a 	bl	8000d54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e0:	f000 f87e 	bl	80003e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e4:	f000 f926 	bl	8000534 <MX_GPIO_Init>
  MX_CAN_Init();
 80002e8:	f000 f8c0 	bl	800046c <MX_CAN_Init>
  MX_I2C1_Init();
 80002ec:	f000 f8f4 	bl	80004d8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80002f0:	f000 f9c6 	bl	8000680 <ssd1306_Init>
  ssd1306_Fill(Black);
 80002f4:	2000      	movs	r0, #0
 80002f6:	f000 fa2d 	bl	8000754 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 80002fa:	f000 fa43 	bl	8000784 <ssd1306_UpdateScreen>
  	HAL_CAN_Start(&hcan);
 80002fe:	4831      	ldr	r0, [pc, #196]	; (80003c4 <main+0xec>)
 8000300:	f000 ff72 	bl	80011e8 <HAL_CAN_Start>
    // Configure the filter
  	sFilterConfig.FilterBank = 0;
 8000304:	4b30      	ldr	r3, [pc, #192]	; (80003c8 <main+0xf0>)
 8000306:	2200      	movs	r2, #0
 8000308:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 800030a:	4b2f      	ldr	r3, [pc, #188]	; (80003c8 <main+0xf0>)
 800030c:	2201      	movs	r2, #1
 800030e:	621a      	str	r2, [r3, #32]
    sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8000310:	4b2d      	ldr	r3, [pc, #180]	; (80003c8 <main+0xf0>)
 8000312:	2201      	movs	r2, #1
 8000314:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000316:	4b2c      	ldr	r3, [pc, #176]	; (80003c8 <main+0xf0>)
 8000318:	2200      	movs	r2, #0
 800031a:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterIdHigh = 0;
 800031c:	4b2a      	ldr	r3, [pc, #168]	; (80003c8 <main+0xf0>)
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterIdLow = 0;
 8000322:	4b29      	ldr	r3, [pc, #164]	; (80003c8 <main+0xf0>)
 8000324:	2200      	movs	r2, #0
 8000326:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterMaskIdHigh = 0; // SET 0 to unfilter
 8000328:	4b27      	ldr	r3, [pc, #156]	; (80003c8 <main+0xf0>)
 800032a:	2200      	movs	r2, #0
 800032c:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterMaskIdLow = 0;
 800032e:	4b26      	ldr	r3, [pc, #152]	; (80003c8 <main+0xf0>)
 8000330:	2200      	movs	r2, #0
 8000332:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000334:	4b24      	ldr	r3, [pc, #144]	; (80003c8 <main+0xf0>)
 8000336:	2201      	movs	r2, #1
 8000338:	61da      	str	r2, [r3, #28]
    HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 800033a:	4923      	ldr	r1, [pc, #140]	; (80003c8 <main+0xf0>)
 800033c:	4821      	ldr	r0, [pc, #132]	; (80003c4 <main+0xec>)
 800033e:	f000 fe8a 	bl	8001056 <HAL_CAN_ConfigFilter>
    // Activate the notification
    HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000342:	2110      	movs	r1, #16
 8000344:	481f      	ldr	r0, [pc, #124]	; (80003c4 <main+0xec>)
 8000346:	f001 f8b4 	bl	80014b2 <HAL_CAN_ActivateNotification>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (obstacleSensorValue == 0)
 800034a:	4b20      	ldr	r3, [pc, #128]	; (80003cc <main+0xf4>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	2b00      	cmp	r3, #0
 8000350:	d114      	bne.n	800037c <main+0xa4>
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000352:	2200      	movs	r2, #0
 8000354:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000358:	481d      	ldr	r0, [pc, #116]	; (80003d0 <main+0xf8>)
 800035a:	f001 fd85 	bl	8001e68 <HAL_GPIO_WritePin>
		  HAL_Delay(delayLED);
 800035e:	4b1d      	ldr	r3, [pc, #116]	; (80003d4 <main+0xfc>)
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	4618      	mov	r0, r3
 8000364:	f000 fd58 	bl	8000e18 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);   // IN1
 8000368:	2201      	movs	r2, #1
 800036a:	2101      	movs	r1, #1
 800036c:	481a      	ldr	r0, [pc, #104]	; (80003d8 <main+0x100>)
 800036e:	f001 fd7b 	bl	8001e68 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // IN2
 8000372:	2200      	movs	r2, #0
 8000374:	2102      	movs	r1, #2
 8000376:	4818      	ldr	r0, [pc, #96]	; (80003d8 <main+0x100>)
 8000378:	f001 fd76 	bl	8001e68 <HAL_GPIO_WritePin>
	  }
    /* USER CODE END WHILE */
	    if (obstacleSensorValue == 1)
 800037c:	4b13      	ldr	r3, [pc, #76]	; (80003cc <main+0xf4>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	2b01      	cmp	r3, #1
 8000382:	d113      	bne.n	80003ac <main+0xd4>
	    {
	    			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	2101      	movs	r1, #1
 8000388:	4813      	ldr	r0, [pc, #76]	; (80003d8 <main+0x100>)
 800038a:	f001 fd6d 	bl	8001e68 <HAL_GPIO_WritePin>
	    			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800038e:	2200      	movs	r2, #0
 8000390:	2102      	movs	r1, #2
 8000392:	4811      	ldr	r0, [pc, #68]	; (80003d8 <main+0x100>)
 8000394:	f001 fd68 	bl	8001e68 <HAL_GPIO_WritePin>
	                // 👉 Thực hiện hành động ở đây (ví dụ bật LED, gửi CAN, ...)
	                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // Ví dụ
 8000398:	2201      	movs	r2, #1
 800039a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800039e:	480c      	ldr	r0, [pc, #48]	; (80003d0 <main+0xf8>)
 80003a0:	f001 fd62 	bl	8001e68 <HAL_GPIO_WritePin>
	                HAL_Delay(2000);
 80003a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003a8:	f000 fd36 	bl	8000e18 <HAL_Delay>
	    }
	    if (level < 100)
 80003ac:	4b0b      	ldr	r3, [pc, #44]	; (80003dc <main+0x104>)
 80003ae:	881b      	ldrh	r3, [r3, #0]
 80003b0:	2b63      	cmp	r3, #99	; 0x63
 80003b2:	d8ca      	bhi.n	800034a <main+0x72>
	    {
	    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80003b4:	2201      	movs	r2, #1
 80003b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ba:	4805      	ldr	r0, [pc, #20]	; (80003d0 <main+0xf8>)
 80003bc:	f001 fd54 	bl	8001e68 <HAL_GPIO_WritePin>
	  if (obstacleSensorValue == 0)
 80003c0:	e7c3      	b.n	800034a <main+0x72>
 80003c2:	bf00      	nop
 80003c4:	20000524 	.word	0x20000524
 80003c8:	200004a0 	.word	0x200004a0
 80003cc:	20000520 	.word	0x20000520
 80003d0:	40011000 	.word	0x40011000
 80003d4:	200004c8 	.word	0x200004c8
 80003d8:	40010800 	.word	0x40010800
 80003dc:	2000054e 	.word	0x2000054e

080003e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b090      	sub	sp, #64	; 0x40
 80003e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003e6:	f107 0318 	add.w	r3, r7, #24
 80003ea:	2228      	movs	r2, #40	; 0x28
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f002 fe4a 	bl	8003088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]
 80003fc:	609a      	str	r2, [r3, #8]
 80003fe:	60da      	str	r2, [r3, #12]
 8000400:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000402:	2301      	movs	r3, #1
 8000404:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000406:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800040a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800040c:	2300      	movs	r3, #0
 800040e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000410:	2301      	movs	r3, #1
 8000412:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000414:	2302      	movs	r3, #2
 8000416:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000418:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800041c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800041e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000422:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000424:	f107 0318 	add.w	r3, r7, #24
 8000428:	4618      	mov	r0, r3
 800042a:	f002 f9e1 	bl	80027f0 <HAL_RCC_OscConfig>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000434:	f000 f8e6 	bl	8000604 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000438:	230f      	movs	r3, #15
 800043a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800043c:	2302      	movs	r3, #2
 800043e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000440:	2300      	movs	r3, #0
 8000442:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000444:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000448:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800044a:	2300      	movs	r3, #0
 800044c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	2102      	movs	r1, #2
 8000452:	4618      	mov	r0, r3
 8000454:	f002 fc4c 	bl	8002cf0 <HAL_RCC_ClockConfig>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800045e:	f000 f8d1 	bl	8000604 <Error_Handler>
  }
}
 8000462:	bf00      	nop
 8000464:	3740      	adds	r7, #64	; 0x40
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
	...

0800046c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000470:	4b17      	ldr	r3, [pc, #92]	; (80004d0 <MX_CAN_Init+0x64>)
 8000472:	4a18      	ldr	r2, [pc, #96]	; (80004d4 <MX_CAN_Init+0x68>)
 8000474:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 72;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <MX_CAN_Init+0x64>)
 8000478:	2248      	movs	r2, #72	; 0x48
 800047a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800047c:	4b14      	ldr	r3, [pc, #80]	; (80004d0 <MX_CAN_Init+0x64>)
 800047e:	2200      	movs	r2, #0
 8000480:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000482:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <MX_CAN_Init+0x64>)
 8000484:	2200      	movs	r2, #0
 8000486:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000488:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <MX_CAN_Init+0x64>)
 800048a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800048e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000490:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <MX_CAN_Init+0x64>)
 8000492:	2200      	movs	r2, #0
 8000494:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <MX_CAN_Init+0x64>)
 8000498:	2200      	movs	r2, #0
 800049a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800049c:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <MX_CAN_Init+0x64>)
 800049e:	2200      	movs	r2, #0
 80004a0:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80004a2:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <MX_CAN_Init+0x64>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80004a8:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <MX_CAN_Init+0x64>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80004ae:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <MX_CAN_Init+0x64>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <MX_CAN_Init+0x64>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80004ba:	4805      	ldr	r0, [pc, #20]	; (80004d0 <MX_CAN_Init+0x64>)
 80004bc:	f000 fcd0 	bl	8000e60 <HAL_CAN_Init>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80004c6:	f000 f89d 	bl	8000604 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	20000524 	.word	0x20000524
 80004d4:	40006400 	.word	0x40006400

080004d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004dc:	4b12      	ldr	r3, [pc, #72]	; (8000528 <MX_I2C1_Init+0x50>)
 80004de:	4a13      	ldr	r2, [pc, #76]	; (800052c <MX_I2C1_Init+0x54>)
 80004e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80004e2:	4b11      	ldr	r3, [pc, #68]	; (8000528 <MX_I2C1_Init+0x50>)
 80004e4:	4a12      	ldr	r2, [pc, #72]	; (8000530 <MX_I2C1_Init+0x58>)
 80004e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004e8:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <MX_I2C1_Init+0x50>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80004ee:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <MX_I2C1_Init+0x50>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004f4:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <MX_I2C1_Init+0x50>)
 80004f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004fc:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <MX_I2C1_Init+0x50>)
 80004fe:	2200      	movs	r2, #0
 8000500:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <MX_I2C1_Init+0x50>)
 8000504:	2200      	movs	r2, #0
 8000506:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000508:	4b07      	ldr	r3, [pc, #28]	; (8000528 <MX_I2C1_Init+0x50>)
 800050a:	2200      	movs	r2, #0
 800050c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <MX_I2C1_Init+0x50>)
 8000510:	2200      	movs	r2, #0
 8000512:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000514:	4804      	ldr	r0, [pc, #16]	; (8000528 <MX_I2C1_Init+0x50>)
 8000516:	f001 fcbf 	bl	8001e98 <HAL_I2C_Init>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000520:	f000 f870 	bl	8000604 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}
 8000528:	200004cc 	.word	0x200004cc
 800052c:	40005400 	.word	0x40005400
 8000530:	000186a0 	.word	0x000186a0

08000534 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b088      	sub	sp, #32
 8000538:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053a:	f107 0310 	add.w	r3, r7, #16
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000548:	4b2b      	ldr	r3, [pc, #172]	; (80005f8 <MX_GPIO_Init+0xc4>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	4a2a      	ldr	r2, [pc, #168]	; (80005f8 <MX_GPIO_Init+0xc4>)
 800054e:	f043 0310 	orr.w	r3, r3, #16
 8000552:	6193      	str	r3, [r2, #24]
 8000554:	4b28      	ldr	r3, [pc, #160]	; (80005f8 <MX_GPIO_Init+0xc4>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	f003 0310 	and.w	r3, r3, #16
 800055c:	60fb      	str	r3, [r7, #12]
 800055e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000560:	4b25      	ldr	r3, [pc, #148]	; (80005f8 <MX_GPIO_Init+0xc4>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	4a24      	ldr	r2, [pc, #144]	; (80005f8 <MX_GPIO_Init+0xc4>)
 8000566:	f043 0320 	orr.w	r3, r3, #32
 800056a:	6193      	str	r3, [r2, #24]
 800056c:	4b22      	ldr	r3, [pc, #136]	; (80005f8 <MX_GPIO_Init+0xc4>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	f003 0320 	and.w	r3, r3, #32
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000578:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <MX_GPIO_Init+0xc4>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	4a1e      	ldr	r2, [pc, #120]	; (80005f8 <MX_GPIO_Init+0xc4>)
 800057e:	f043 0304 	orr.w	r3, r3, #4
 8000582:	6193      	str	r3, [r2, #24]
 8000584:	4b1c      	ldr	r3, [pc, #112]	; (80005f8 <MX_GPIO_Init+0xc4>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	f003 0304 	and.w	r3, r3, #4
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000590:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <MX_GPIO_Init+0xc4>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	4a18      	ldr	r2, [pc, #96]	; (80005f8 <MX_GPIO_Init+0xc4>)
 8000596:	f043 0308 	orr.w	r3, r3, #8
 800059a:	6193      	str	r3, [r2, #24]
 800059c:	4b16      	ldr	r3, [pc, #88]	; (80005f8 <MX_GPIO_Init+0xc4>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	f003 0308 	and.w	r3, r3, #8
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ae:	4813      	ldr	r0, [pc, #76]	; (80005fc <MX_GPIO_Init+0xc8>)
 80005b0:	f001 fc5a 	bl	8001e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ba:	2301      	movs	r3, #1
 80005bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c2:	2302      	movs	r3, #2
 80005c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c6:	f107 0310 	add.w	r3, r7, #16
 80005ca:	4619      	mov	r1, r3
 80005cc:	480b      	ldr	r0, [pc, #44]	; (80005fc <MX_GPIO_Init+0xc8>)
 80005ce:	f001 fac7 	bl	8001b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80005d2:	2303      	movs	r3, #3
 80005d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d6:	2301      	movs	r3, #1
 80005d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005de:	2302      	movs	r3, #2
 80005e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e2:	f107 0310 	add.w	r3, r7, #16
 80005e6:	4619      	mov	r1, r3
 80005e8:	4805      	ldr	r0, [pc, #20]	; (8000600 <MX_GPIO_Init+0xcc>)
 80005ea:	f001 fab9 	bl	8001b60 <HAL_GPIO_Init>


}
 80005ee:	bf00      	nop
 80005f0:	3720      	adds	r7, #32
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40021000 	.word	0x40021000
 80005fc:	40011000 	.word	0x40011000
 8000600:	40010800 	.word	0x40010800

08000604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000608:	b672      	cpsid	i
}
 800060a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800060c:	e7fe      	b.n	800060c <Error_Handler+0x8>

0800060e <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	bc80      	pop	{r7}
 8000618:	4770      	bx	lr
	...

0800061c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af04      	add	r7, sp, #16
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000626:	f04f 33ff 	mov.w	r3, #4294967295
 800062a:	9302      	str	r3, [sp, #8]
 800062c:	2301      	movs	r3, #1
 800062e:	9301      	str	r3, [sp, #4]
 8000630:	1dfb      	adds	r3, r7, #7
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	2301      	movs	r3, #1
 8000636:	2200      	movs	r2, #0
 8000638:	2178      	movs	r1, #120	; 0x78
 800063a:	4803      	ldr	r0, [pc, #12]	; (8000648 <ssd1306_WriteCommand+0x2c>)
 800063c:	f001 fd70 	bl	8002120 <HAL_I2C_Mem_Write>
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200004cc 	.word	0x200004cc

0800064c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af04      	add	r7, sp, #16
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	b29b      	uxth	r3, r3
 800065a:	f04f 32ff 	mov.w	r2, #4294967295
 800065e:	9202      	str	r2, [sp, #8]
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2301      	movs	r3, #1
 8000668:	2240      	movs	r2, #64	; 0x40
 800066a:	2178      	movs	r1, #120	; 0x78
 800066c:	4803      	ldr	r0, [pc, #12]	; (800067c <ssd1306_WriteData+0x30>)
 800066e:	f001 fd57 	bl	8002120 <HAL_I2C_Mem_Write>
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	200004cc 	.word	0x200004cc

08000680 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000684:	f7ff ffc3 	bl	800060e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000688:	2064      	movs	r0, #100	; 0x64
 800068a:	f000 fbc5 	bl	8000e18 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800068e:	2000      	movs	r0, #0
 8000690:	f000 f9d6 	bl	8000a40 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000694:	2020      	movs	r0, #32
 8000696:	f7ff ffc1 	bl	800061c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800069a:	2000      	movs	r0, #0
 800069c:	f7ff ffbe 	bl	800061c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80006a0:	20b0      	movs	r0, #176	; 0xb0
 80006a2:	f7ff ffbb 	bl	800061c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80006a6:	20c8      	movs	r0, #200	; 0xc8
 80006a8:	f7ff ffb8 	bl	800061c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80006ac:	2000      	movs	r0, #0
 80006ae:	f7ff ffb5 	bl	800061c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80006b2:	2010      	movs	r0, #16
 80006b4:	f7ff ffb2 	bl	800061c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80006b8:	2040      	movs	r0, #64	; 0x40
 80006ba:	f7ff ffaf 	bl	800061c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80006be:	20ff      	movs	r0, #255	; 0xff
 80006c0:	f000 f9aa 	bl	8000a18 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80006c4:	20a1      	movs	r0, #161	; 0xa1
 80006c6:	f7ff ffa9 	bl	800061c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80006ca:	20a6      	movs	r0, #166	; 0xa6
 80006cc:	f7ff ffa6 	bl	800061c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80006d0:	20a8      	movs	r0, #168	; 0xa8
 80006d2:	f7ff ffa3 	bl	800061c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80006d6:	203f      	movs	r0, #63	; 0x3f
 80006d8:	f7ff ffa0 	bl	800061c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80006dc:	20a4      	movs	r0, #164	; 0xa4
 80006de:	f7ff ff9d 	bl	800061c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80006e2:	20d3      	movs	r0, #211	; 0xd3
 80006e4:	f7ff ff9a 	bl	800061c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80006e8:	2000      	movs	r0, #0
 80006ea:	f7ff ff97 	bl	800061c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80006ee:	20d5      	movs	r0, #213	; 0xd5
 80006f0:	f7ff ff94 	bl	800061c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80006f4:	20f0      	movs	r0, #240	; 0xf0
 80006f6:	f7ff ff91 	bl	800061c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80006fa:	20d9      	movs	r0, #217	; 0xd9
 80006fc:	f7ff ff8e 	bl	800061c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000700:	2022      	movs	r0, #34	; 0x22
 8000702:	f7ff ff8b 	bl	800061c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000706:	20da      	movs	r0, #218	; 0xda
 8000708:	f7ff ff88 	bl	800061c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800070c:	2012      	movs	r0, #18
 800070e:	f7ff ff85 	bl	800061c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000712:	20db      	movs	r0, #219	; 0xdb
 8000714:	f7ff ff82 	bl	800061c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000718:	2020      	movs	r0, #32
 800071a:	f7ff ff7f 	bl	800061c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800071e:	208d      	movs	r0, #141	; 0x8d
 8000720:	f7ff ff7c 	bl	800061c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000724:	2014      	movs	r0, #20
 8000726:	f7ff ff79 	bl	800061c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800072a:	2001      	movs	r0, #1
 800072c:	f000 f988 	bl	8000a40 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000730:	2000      	movs	r0, #0
 8000732:	f000 f80f 	bl	8000754 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000736:	f000 f825 	bl	8000784 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800073a:	4b05      	ldr	r3, [pc, #20]	; (8000750 <ssd1306_Init+0xd0>)
 800073c:	2200      	movs	r2, #0
 800073e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000740:	4b03      	ldr	r3, [pc, #12]	; (8000750 <ssd1306_Init+0xd0>)
 8000742:	2200      	movs	r2, #0
 8000744:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000746:	4b02      	ldr	r3, [pc, #8]	; (8000750 <ssd1306_Init+0xd0>)
 8000748:	2201      	movs	r2, #1
 800074a:	711a      	strb	r2, [r3, #4]
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	2000048c 	.word	0x2000048c

08000754 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d101      	bne.n	8000768 <ssd1306_Fill+0x14>
 8000764:	2300      	movs	r3, #0
 8000766:	e000      	b.n	800076a <ssd1306_Fill+0x16>
 8000768:	23ff      	movs	r3, #255	; 0xff
 800076a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800076e:	4619      	mov	r1, r3
 8000770:	4803      	ldr	r0, [pc, #12]	; (8000780 <ssd1306_Fill+0x2c>)
 8000772:	f002 fc89 	bl	8003088 <memset>
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	2000008c 	.word	0x2000008c

08000784 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800078a:	2300      	movs	r3, #0
 800078c:	71fb      	strb	r3, [r7, #7]
 800078e:	e016      	b.n	80007be <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	3b50      	subs	r3, #80	; 0x50
 8000794:	b2db      	uxtb	r3, r3
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff ff40 	bl	800061c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800079c:	2000      	movs	r0, #0
 800079e:	f7ff ff3d 	bl	800061c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80007a2:	2010      	movs	r0, #16
 80007a4:	f7ff ff3a 	bl	800061c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	01db      	lsls	r3, r3, #7
 80007ac:	4a08      	ldr	r2, [pc, #32]	; (80007d0 <ssd1306_UpdateScreen+0x4c>)
 80007ae:	4413      	add	r3, r2
 80007b0:	2180      	movs	r1, #128	; 0x80
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff ff4a 	bl	800064c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	3301      	adds	r3, #1
 80007bc:	71fb      	strb	r3, [r7, #7]
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	2b07      	cmp	r3, #7
 80007c2:	d9e5      	bls.n	8000790 <ssd1306_UpdateScreen+0xc>
    }
}
 80007c4:	bf00      	nop
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	2000008c 	.word	0x2000008c

080007d4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
 80007de:	460b      	mov	r3, r1
 80007e0:	71bb      	strb	r3, [r7, #6]
 80007e2:	4613      	mov	r3, r2
 80007e4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80007e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	db3d      	blt.n	800086a <ssd1306_DrawPixel+0x96>
 80007ee:	79bb      	ldrb	r3, [r7, #6]
 80007f0:	2b3f      	cmp	r3, #63	; 0x3f
 80007f2:	d83a      	bhi.n	800086a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80007f4:	797b      	ldrb	r3, [r7, #5]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d11a      	bne.n	8000830 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80007fa:	79fa      	ldrb	r2, [r7, #7]
 80007fc:	79bb      	ldrb	r3, [r7, #6]
 80007fe:	08db      	lsrs	r3, r3, #3
 8000800:	b2d8      	uxtb	r0, r3
 8000802:	4603      	mov	r3, r0
 8000804:	01db      	lsls	r3, r3, #7
 8000806:	4413      	add	r3, r2
 8000808:	4a1a      	ldr	r2, [pc, #104]	; (8000874 <ssd1306_DrawPixel+0xa0>)
 800080a:	5cd3      	ldrb	r3, [r2, r3]
 800080c:	b25a      	sxtb	r2, r3
 800080e:	79bb      	ldrb	r3, [r7, #6]
 8000810:	f003 0307 	and.w	r3, r3, #7
 8000814:	2101      	movs	r1, #1
 8000816:	fa01 f303 	lsl.w	r3, r1, r3
 800081a:	b25b      	sxtb	r3, r3
 800081c:	4313      	orrs	r3, r2
 800081e:	b259      	sxtb	r1, r3
 8000820:	79fa      	ldrb	r2, [r7, #7]
 8000822:	4603      	mov	r3, r0
 8000824:	01db      	lsls	r3, r3, #7
 8000826:	4413      	add	r3, r2
 8000828:	b2c9      	uxtb	r1, r1
 800082a:	4a12      	ldr	r2, [pc, #72]	; (8000874 <ssd1306_DrawPixel+0xa0>)
 800082c:	54d1      	strb	r1, [r2, r3]
 800082e:	e01d      	b.n	800086c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000830:	79fa      	ldrb	r2, [r7, #7]
 8000832:	79bb      	ldrb	r3, [r7, #6]
 8000834:	08db      	lsrs	r3, r3, #3
 8000836:	b2d8      	uxtb	r0, r3
 8000838:	4603      	mov	r3, r0
 800083a:	01db      	lsls	r3, r3, #7
 800083c:	4413      	add	r3, r2
 800083e:	4a0d      	ldr	r2, [pc, #52]	; (8000874 <ssd1306_DrawPixel+0xa0>)
 8000840:	5cd3      	ldrb	r3, [r2, r3]
 8000842:	b25a      	sxtb	r2, r3
 8000844:	79bb      	ldrb	r3, [r7, #6]
 8000846:	f003 0307 	and.w	r3, r3, #7
 800084a:	2101      	movs	r1, #1
 800084c:	fa01 f303 	lsl.w	r3, r1, r3
 8000850:	b25b      	sxtb	r3, r3
 8000852:	43db      	mvns	r3, r3
 8000854:	b25b      	sxtb	r3, r3
 8000856:	4013      	ands	r3, r2
 8000858:	b259      	sxtb	r1, r3
 800085a:	79fa      	ldrb	r2, [r7, #7]
 800085c:	4603      	mov	r3, r0
 800085e:	01db      	lsls	r3, r3, #7
 8000860:	4413      	add	r3, r2
 8000862:	b2c9      	uxtb	r1, r1
 8000864:	4a03      	ldr	r2, [pc, #12]	; (8000874 <ssd1306_DrawPixel+0xa0>)
 8000866:	54d1      	strb	r1, [r2, r3]
 8000868:	e000      	b.n	800086c <ssd1306_DrawPixel+0x98>
        return;
 800086a:	bf00      	nop
    }
}
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr
 8000874:	2000008c 	.word	0x2000008c

08000878 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b089      	sub	sp, #36	; 0x24
 800087c:	af00      	add	r7, sp, #0
 800087e:	4604      	mov	r4, r0
 8000880:	4638      	mov	r0, r7
 8000882:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000886:	4623      	mov	r3, r4
 8000888:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800088a:	7bfb      	ldrb	r3, [r7, #15]
 800088c:	2b1f      	cmp	r3, #31
 800088e:	d902      	bls.n	8000896 <ssd1306_WriteChar+0x1e>
 8000890:	7bfb      	ldrb	r3, [r7, #15]
 8000892:	2b7e      	cmp	r3, #126	; 0x7e
 8000894:	d901      	bls.n	800089a <ssd1306_WriteChar+0x22>
        return 0;
 8000896:	2300      	movs	r3, #0
 8000898:	e079      	b.n	800098e <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d005      	beq.n	80008ac <ssd1306_WriteChar+0x34>
 80008a0:	68ba      	ldr	r2, [r7, #8]
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
 80008a4:	3b20      	subs	r3, #32
 80008a6:	4413      	add	r3, r2
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	e000      	b.n	80008ae <ssd1306_WriteChar+0x36>
 80008ac:	783b      	ldrb	r3, [r7, #0]
 80008ae:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80008b0:	4b39      	ldr	r3, [pc, #228]	; (8000998 <ssd1306_WriteChar+0x120>)
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	461a      	mov	r2, r3
 80008b6:	7dfb      	ldrb	r3, [r7, #23]
 80008b8:	4413      	add	r3, r2
 80008ba:	2b80      	cmp	r3, #128	; 0x80
 80008bc:	dc06      	bgt.n	80008cc <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80008be:	4b36      	ldr	r3, [pc, #216]	; (8000998 <ssd1306_WriteChar+0x120>)
 80008c0:	885b      	ldrh	r3, [r3, #2]
 80008c2:	461a      	mov	r2, r3
 80008c4:	787b      	ldrb	r3, [r7, #1]
 80008c6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80008c8:	2b40      	cmp	r3, #64	; 0x40
 80008ca:	dd01      	ble.n	80008d0 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	e05e      	b.n	800098e <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
 80008d4:	e04d      	b.n	8000972 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	7bfb      	ldrb	r3, [r7, #15]
 80008da:	3b20      	subs	r3, #32
 80008dc:	7879      	ldrb	r1, [r7, #1]
 80008de:	fb01 f303 	mul.w	r3, r1, r3
 80008e2:	4619      	mov	r1, r3
 80008e4:	69fb      	ldr	r3, [r7, #28]
 80008e6:	440b      	add	r3, r1
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	4413      	add	r3, r2
 80008ec:	881b      	ldrh	r3, [r3, #0]
 80008ee:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 80008f0:	2300      	movs	r3, #0
 80008f2:	61bb      	str	r3, [r7, #24]
 80008f4:	e036      	b.n	8000964 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 80008f6:	693a      	ldr	r2, [r7, #16]
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000902:	2b00      	cmp	r3, #0
 8000904:	d013      	beq.n	800092e <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000906:	4b24      	ldr	r3, [pc, #144]	; (8000998 <ssd1306_WriteChar+0x120>)
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	b2da      	uxtb	r2, r3
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	4413      	add	r3, r2
 8000912:	b2d8      	uxtb	r0, r3
 8000914:	4b20      	ldr	r3, [pc, #128]	; (8000998 <ssd1306_WriteChar+0x120>)
 8000916:	885b      	ldrh	r3, [r3, #2]
 8000918:	b2da      	uxtb	r2, r3
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	b2db      	uxtb	r3, r3
 800091e:	4413      	add	r3, r2
 8000920:	b2db      	uxtb	r3, r3
 8000922:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000926:	4619      	mov	r1, r3
 8000928:	f7ff ff54 	bl	80007d4 <ssd1306_DrawPixel>
 800092c:	e017      	b.n	800095e <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800092e:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <ssd1306_WriteChar+0x120>)
 8000930:	881b      	ldrh	r3, [r3, #0]
 8000932:	b2da      	uxtb	r2, r3
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	b2db      	uxtb	r3, r3
 8000938:	4413      	add	r3, r2
 800093a:	b2d8      	uxtb	r0, r3
 800093c:	4b16      	ldr	r3, [pc, #88]	; (8000998 <ssd1306_WriteChar+0x120>)
 800093e:	885b      	ldrh	r3, [r3, #2]
 8000940:	b2da      	uxtb	r2, r3
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	4413      	add	r3, r2
 8000948:	b2d9      	uxtb	r1, r3
 800094a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800094e:	2b00      	cmp	r3, #0
 8000950:	bf0c      	ite	eq
 8000952:	2301      	moveq	r3, #1
 8000954:	2300      	movne	r3, #0
 8000956:	b2db      	uxtb	r3, r3
 8000958:	461a      	mov	r2, r3
 800095a:	f7ff ff3b 	bl	80007d4 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 800095e:	69bb      	ldr	r3, [r7, #24]
 8000960:	3301      	adds	r3, #1
 8000962:	61bb      	str	r3, [r7, #24]
 8000964:	7dfb      	ldrb	r3, [r7, #23]
 8000966:	69ba      	ldr	r2, [r7, #24]
 8000968:	429a      	cmp	r2, r3
 800096a:	d3c4      	bcc.n	80008f6 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	3301      	adds	r3, #1
 8000970:	61fb      	str	r3, [r7, #28]
 8000972:	787b      	ldrb	r3, [r7, #1]
 8000974:	461a      	mov	r2, r3
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	4293      	cmp	r3, r2
 800097a:	d3ac      	bcc.n	80008d6 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <ssd1306_WriteChar+0x120>)
 800097e:	881a      	ldrh	r2, [r3, #0]
 8000980:	7dfb      	ldrb	r3, [r7, #23]
 8000982:	b29b      	uxth	r3, r3
 8000984:	4413      	add	r3, r2
 8000986:	b29a      	uxth	r2, r3
 8000988:	4b03      	ldr	r3, [pc, #12]	; (8000998 <ssd1306_WriteChar+0x120>)
 800098a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800098c:	7bfb      	ldrb	r3, [r7, #15]
}
 800098e:	4618      	mov	r0, r3
 8000990:	3724      	adds	r7, #36	; 0x24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd90      	pop	{r4, r7, pc}
 8000996:	bf00      	nop
 8000998:	2000048c 	.word	0x2000048c

0800099c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af02      	add	r7, sp, #8
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	4638      	mov	r0, r7
 80009a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80009aa:	e013      	b.n	80009d4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	7818      	ldrb	r0, [r3, #0]
 80009b0:	7e3b      	ldrb	r3, [r7, #24]
 80009b2:	9300      	str	r3, [sp, #0]
 80009b4:	463b      	mov	r3, r7
 80009b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009b8:	f7ff ff5e 	bl	8000878 <ssd1306_WriteChar>
 80009bc:	4603      	mov	r3, r0
 80009be:	461a      	mov	r2, r3
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d002      	beq.n	80009ce <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	e008      	b.n	80009e0 <ssd1306_WriteString+0x44>
        }
        str++;
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	3301      	adds	r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d1e7      	bne.n	80009ac <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	781b      	ldrb	r3, [r3, #0]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	460a      	mov	r2, r1
 80009f2:	71fb      	strb	r3, [r7, #7]
 80009f4:	4613      	mov	r3, r2
 80009f6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <ssd1306_SetCursor+0x2c>)
 80009fe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000a00:	79bb      	ldrb	r3, [r7, #6]
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <ssd1306_SetCursor+0x2c>)
 8000a06:	805a      	strh	r2, [r3, #2]
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	2000048c 	.word	0x2000048c

08000a18 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000a22:	2381      	movs	r3, #129	; 0x81
 8000a24:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000a26:	7bfb      	ldrb	r3, [r7, #15]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff fdf7 	bl	800061c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff fdf3 	bl	800061c <ssd1306_WriteCommand>
}
 8000a36:	bf00      	nop
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d005      	beq.n	8000a5c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000a50:	23af      	movs	r3, #175	; 0xaf
 8000a52:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <ssd1306_SetDisplayOn+0x38>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	715a      	strb	r2, [r3, #5]
 8000a5a:	e004      	b.n	8000a66 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000a5c:	23ae      	movs	r3, #174	; 0xae
 8000a5e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <ssd1306_SetDisplayOn+0x38>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000a66:	7bfb      	ldrb	r3, [r7, #15]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fdd7 	bl	800061c <ssd1306_WriteCommand>
}
 8000a6e:	bf00      	nop
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	2000048c 	.word	0x2000048c

08000a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <HAL_MspInit+0x5c>)
 8000a84:	699b      	ldr	r3, [r3, #24]
 8000a86:	4a14      	ldr	r2, [pc, #80]	; (8000ad8 <HAL_MspInit+0x5c>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6193      	str	r3, [r2, #24]
 8000a8e:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <HAL_MspInit+0x5c>)
 8000a90:	699b      	ldr	r3, [r3, #24]
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <HAL_MspInit+0x5c>)
 8000a9c:	69db      	ldr	r3, [r3, #28]
 8000a9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ad8 <HAL_MspInit+0x5c>)
 8000aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa4:	61d3      	str	r3, [r2, #28]
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <HAL_MspInit+0x5c>)
 8000aa8:	69db      	ldr	r3, [r3, #28]
 8000aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <HAL_MspInit+0x60>)
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	4a04      	ldr	r2, [pc, #16]	; (8000adc <HAL_MspInit+0x60>)
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	3714      	adds	r7, #20
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40010000 	.word	0x40010000

08000ae0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a29      	ldr	r2, [pc, #164]	; (8000ba0 <HAL_CAN_MspInit+0xc0>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d14b      	bne.n	8000b98 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b00:	4b28      	ldr	r3, [pc, #160]	; (8000ba4 <HAL_CAN_MspInit+0xc4>)
 8000b02:	69db      	ldr	r3, [r3, #28]
 8000b04:	4a27      	ldr	r2, [pc, #156]	; (8000ba4 <HAL_CAN_MspInit+0xc4>)
 8000b06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b0a:	61d3      	str	r3, [r2, #28]
 8000b0c:	4b25      	ldr	r3, [pc, #148]	; (8000ba4 <HAL_CAN_MspInit+0xc4>)
 8000b0e:	69db      	ldr	r3, [r3, #28]
 8000b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b18:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <HAL_CAN_MspInit+0xc4>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a21      	ldr	r2, [pc, #132]	; (8000ba4 <HAL_CAN_MspInit+0xc4>)
 8000b1e:	f043 0308 	orr.w	r3, r3, #8
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <HAL_CAN_MspInit+0xc4>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f003 0308 	and.w	r3, r3, #8
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4818      	ldr	r0, [pc, #96]	; (8000ba8 <HAL_CAN_MspInit+0xc8>)
 8000b46:	f001 f80b 	bl	8001b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	2302      	movs	r3, #2
 8000b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b54:	2303      	movs	r3, #3
 8000b56:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4812      	ldr	r0, [pc, #72]	; (8000ba8 <HAL_CAN_MspInit+0xc8>)
 8000b60:	f000 fffe 	bl	8001b60 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <HAL_CAN_MspInit+0xcc>)
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
 8000b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
 8000b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b74:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
 8000b82:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <HAL_CAN_MspInit+0xcc>)
 8000b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b86:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2015      	movs	r0, #21
 8000b8e:	f000 ffb0 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000b92:	2015      	movs	r0, #21
 8000b94:	f000 ffc9 	bl	8001b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000b98:	bf00      	nop
 8000b9a:	3728      	adds	r7, #40	; 0x28
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40006400 	.word	0x40006400
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	40010c00 	.word	0x40010c00
 8000bac:	40010000 	.word	0x40010000

08000bb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b088      	sub	sp, #32
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 0310 	add.w	r3, r7, #16
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a15      	ldr	r2, [pc, #84]	; (8000c20 <HAL_I2C_MspInit+0x70>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d123      	bne.n	8000c18 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <HAL_I2C_MspInit+0x74>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	4a13      	ldr	r2, [pc, #76]	; (8000c24 <HAL_I2C_MspInit+0x74>)
 8000bd6:	f043 0308 	orr.w	r3, r3, #8
 8000bda:	6193      	str	r3, [r2, #24]
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <HAL_I2C_MspInit+0x74>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	f003 0308 	and.w	r3, r3, #8
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000be8:	23c0      	movs	r3, #192	; 0xc0
 8000bea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bec:	2312      	movs	r3, #18
 8000bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf4:	f107 0310 	add.w	r3, r7, #16
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480b      	ldr	r0, [pc, #44]	; (8000c28 <HAL_I2C_MspInit+0x78>)
 8000bfc:	f000 ffb0 	bl	8001b60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <HAL_I2C_MspInit+0x74>)
 8000c02:	69db      	ldr	r3, [r3, #28]
 8000c04:	4a07      	ldr	r2, [pc, #28]	; (8000c24 <HAL_I2C_MspInit+0x74>)
 8000c06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c0a:	61d3      	str	r3, [r2, #28]
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <HAL_I2C_MspInit+0x74>)
 8000c0e:	69db      	ldr	r3, [r3, #28]
 8000c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c18:	bf00      	nop
 8000c1a:	3720      	adds	r7, #32
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40005400 	.word	0x40005400
 8000c24:	40021000 	.word	0x40021000
 8000c28:	40010c00 	.word	0x40010c00

08000c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <NMI_Handler+0x4>

08000c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <HardFault_Handler+0x4>

08000c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <MemManage_Handler+0x4>

08000c3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <BusFault_Handler+0x4>

08000c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <UsageFault_Handler+0x4>

08000c4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr

08000c56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr

08000c62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr

08000c6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c72:	f000 f8b5 	bl	8000de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <CAN1_RX1_IRQHandler+0x10>)
 8000c82:	f000 fc3b 	bl	80014fc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000524 	.word	0x20000524

08000c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c98:	4a14      	ldr	r2, [pc, #80]	; (8000cec <_sbrk+0x5c>)
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <_sbrk+0x60>)
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca4:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d102      	bne.n	8000cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <_sbrk+0x64>)
 8000cae:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <_sbrk+0x68>)
 8000cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d207      	bcs.n	8000cd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc0:	f002 f990 	bl	8002fe4 <__errno>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
 8000cce:	e009      	b.n	8000ce4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd0:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <_sbrk+0x64>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cd6:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <_sbrk+0x64>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4413      	add	r3, r2
 8000cde:	4a05      	ldr	r2, [pc, #20]	; (8000cf4 <_sbrk+0x64>)
 8000ce0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3718      	adds	r7, #24
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20005000 	.word	0x20005000
 8000cf0:	00000400 	.word	0x00000400
 8000cf4:	20000494 	.word	0x20000494
 8000cf8:	200005a0 	.word	0x200005a0

08000cfc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr

08000d08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d08:	f7ff fff8 	bl	8000cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d0c:	480b      	ldr	r0, [pc, #44]	; (8000d3c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d0e:	490c      	ldr	r1, [pc, #48]	; (8000d40 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d10:	4a0c      	ldr	r2, [pc, #48]	; (8000d44 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d14:	e002      	b.n	8000d1c <LoopCopyDataInit>

08000d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1a:	3304      	adds	r3, #4

08000d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d20:	d3f9      	bcc.n	8000d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d22:	4a09      	ldr	r2, [pc, #36]	; (8000d48 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d24:	4c09      	ldr	r4, [pc, #36]	; (8000d4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d28:	e001      	b.n	8000d2e <LoopFillZerobss>

08000d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d2c:	3204      	adds	r2, #4

08000d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d30:	d3fb      	bcc.n	8000d2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d32:	f002 f95d 	bl	8002ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d36:	f7ff facf 	bl	80002d8 <main>
  bx lr
 8000d3a:	4770      	bx	lr
  ldr r0, =_sdata
 8000d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d40:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d44:	0800413c 	.word	0x0800413c
  ldr r2, =_sbss
 8000d48:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d4c:	2000059c 	.word	0x2000059c

08000d50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d50:	e7fe      	b.n	8000d50 <ADC1_2_IRQHandler>
	...

08000d54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <HAL_Init+0x28>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a07      	ldr	r2, [pc, #28]	; (8000d7c <HAL_Init+0x28>)
 8000d5e:	f043 0310 	orr.w	r3, r3, #16
 8000d62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d64:	2003      	movs	r0, #3
 8000d66:	f000 feb9 	bl	8001adc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d6a:	200f      	movs	r0, #15
 8000d6c:	f000 f808 	bl	8000d80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d70:	f7ff fe84 	bl	8000a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40022000 	.word	0x40022000

08000d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_InitTick+0x54>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <HAL_InitTick+0x58>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	4619      	mov	r1, r3
 8000d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 fed1 	bl	8001b46 <HAL_SYSTICK_Config>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e00e      	b.n	8000dcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2b0f      	cmp	r3, #15
 8000db2:	d80a      	bhi.n	8000dca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db4:	2200      	movs	r2, #0
 8000db6:	6879      	ldr	r1, [r7, #4]
 8000db8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dbc:	f000 fe99 	bl	8001af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc0:	4a06      	ldr	r2, [pc, #24]	; (8000ddc <HAL_InitTick+0x5c>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e000      	b.n	8000dcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	20000004 	.word	0x20000004

08000de0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <HAL_IncTick+0x1c>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <HAL_IncTick+0x20>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4413      	add	r3, r2
 8000df0:	4a03      	ldr	r2, [pc, #12]	; (8000e00 <HAL_IncTick+0x20>)
 8000df2:	6013      	str	r3, [r2, #0]
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	20000588 	.word	0x20000588

08000e04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return uwTick;
 8000e08:	4b02      	ldr	r3, [pc, #8]	; (8000e14 <HAL_GetTick+0x10>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr
 8000e14:	20000588 	.word	0x20000588

08000e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e20:	f7ff fff0 	bl	8000e04 <HAL_GetTick>
 8000e24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e30:	d005      	beq.n	8000e3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e32:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <HAL_Delay+0x44>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	461a      	mov	r2, r3
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e3e:	bf00      	nop
 8000e40:	f7ff ffe0 	bl	8000e04 <HAL_GetTick>
 8000e44:	4602      	mov	r2, r0
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	68fa      	ldr	r2, [r7, #12]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d8f7      	bhi.n	8000e40 <HAL_Delay+0x28>
  {
  }
}
 8000e50:	bf00      	nop
 8000e52:	bf00      	nop
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000008 	.word	0x20000008

08000e60 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d101      	bne.n	8000e72 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e0ed      	b.n	800104e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d102      	bne.n	8000e84 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff fe2e 	bl	8000ae0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f042 0201 	orr.w	r2, r2, #1
 8000e92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e94:	f7ff ffb6 	bl	8000e04 <HAL_GetTick>
 8000e98:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e9a:	e012      	b.n	8000ec2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e9c:	f7ff ffb2 	bl	8000e04 <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	2b0a      	cmp	r3, #10
 8000ea8:	d90b      	bls.n	8000ec2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2205      	movs	r2, #5
 8000eba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e0c5      	b.n	800104e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d0e5      	beq.n	8000e9c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f022 0202 	bic.w	r2, r2, #2
 8000ede:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ee0:	f7ff ff90 	bl	8000e04 <HAL_GetTick>
 8000ee4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ee6:	e012      	b.n	8000f0e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ee8:	f7ff ff8c 	bl	8000e04 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	2b0a      	cmp	r3, #10
 8000ef4:	d90b      	bls.n	8000f0e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2205      	movs	r2, #5
 8000f06:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e09f      	b.n	800104e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 0302 	and.w	r3, r3, #2
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d1e5      	bne.n	8000ee8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	7e1b      	ldrb	r3, [r3, #24]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d108      	bne.n	8000f36 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	e007      	b.n	8000f46 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f44:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	7e5b      	ldrb	r3, [r3, #25]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d108      	bne.n	8000f60 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	e007      	b.n	8000f70 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	7e9b      	ldrb	r3, [r3, #26]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d108      	bne.n	8000f8a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f042 0220 	orr.w	r2, r2, #32
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	e007      	b.n	8000f9a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f022 0220 	bic.w	r2, r2, #32
 8000f98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7edb      	ldrb	r3, [r3, #27]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d108      	bne.n	8000fb4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f022 0210 	bic.w	r2, r2, #16
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	e007      	b.n	8000fc4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f042 0210 	orr.w	r2, r2, #16
 8000fc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	7f1b      	ldrb	r3, [r3, #28]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d108      	bne.n	8000fde <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f042 0208 	orr.w	r2, r2, #8
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	e007      	b.n	8000fee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f022 0208 	bic.w	r2, r2, #8
 8000fec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	7f5b      	ldrb	r3, [r3, #29]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d108      	bne.n	8001008 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f042 0204 	orr.w	r2, r2, #4
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	e007      	b.n	8001018 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f022 0204 	bic.w	r2, r2, #4
 8001016:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689a      	ldr	r2, [r3, #8]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	431a      	orrs	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	691b      	ldr	r3, [r3, #16]
 8001026:	431a      	orrs	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	ea42 0103 	orr.w	r1, r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	1e5a      	subs	r2, r3, #1
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	430a      	orrs	r2, r1
 800103c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2201      	movs	r2, #1
 8001048:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001056:	b480      	push	{r7}
 8001058:	b087      	sub	sp, #28
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
 800105e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f893 3020 	ldrb.w	r3, [r3, #32]
 800106c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800106e:	7cfb      	ldrb	r3, [r7, #19]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d003      	beq.n	800107c <HAL_CAN_ConfigFilter+0x26>
 8001074:	7cfb      	ldrb	r3, [r7, #19]
 8001076:	2b02      	cmp	r3, #2
 8001078:	f040 80aa 	bne.w	80011d0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001082:	f043 0201 	orr.w	r2, r3, #1
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	695b      	ldr	r3, [r3, #20]
 8001090:	f003 031f 	and.w	r3, r3, #31
 8001094:	2201      	movs	r2, #1
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	401a      	ands	r2, r3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d123      	bne.n	80010fe <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	43db      	mvns	r3, r3
 80010c0:	401a      	ands	r2, r3
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80010d8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	3248      	adds	r2, #72	; 0x48
 80010de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010f2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010f4:	6979      	ldr	r1, [r7, #20]
 80010f6:	3348      	adds	r3, #72	; 0x48
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	440b      	add	r3, r1
 80010fc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d122      	bne.n	800114c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	431a      	orrs	r2, r3
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001122:	683a      	ldr	r2, [r7, #0]
 8001124:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001126:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	3248      	adds	r2, #72	; 0x48
 800112c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001140:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001142:	6979      	ldr	r1, [r7, #20]
 8001144:	3348      	adds	r3, #72	; 0x48
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	440b      	add	r3, r1
 800114a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d109      	bne.n	8001168 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	43db      	mvns	r3, r3
 800115e:	401a      	ands	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001166:	e007      	b.n	8001178 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	431a      	orrs	r2, r3
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d109      	bne.n	8001194 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	43db      	mvns	r3, r3
 800118a:	401a      	ands	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001192:	e007      	b.n	80011a4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	431a      	orrs	r2, r3
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	6a1b      	ldr	r3, [r3, #32]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d107      	bne.n	80011bc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	431a      	orrs	r2, r3
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80011c2:	f023 0201 	bic.w	r2, r3, #1
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80011cc:	2300      	movs	r3, #0
 80011ce:	e006      	b.n	80011de <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
  }
}
 80011de:	4618      	mov	r0, r3
 80011e0:	371c      	adds	r7, #28
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr

080011e8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d12e      	bne.n	800125a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2202      	movs	r2, #2
 8001200:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 0201 	bic.w	r2, r2, #1
 8001212:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001214:	f7ff fdf6 	bl	8000e04 <HAL_GetTick>
 8001218:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800121a:	e012      	b.n	8001242 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800121c:	f7ff fdf2 	bl	8000e04 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b0a      	cmp	r3, #10
 8001228:	d90b      	bls.n	8001242 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2205      	movs	r2, #5
 800123a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e012      	b.n	8001268 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1e5      	bne.n	800121c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001256:	2300      	movs	r3, #0
 8001258:	e006      	b.n	8001268 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
  }
}
 8001268:	4618      	mov	r0, r3
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001270:	b480      	push	{r7}
 8001272:	b087      	sub	sp, #28
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
 800127c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001284:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001286:	7dfb      	ldrb	r3, [r7, #23]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d003      	beq.n	8001294 <HAL_CAN_GetRxMessage+0x24>
 800128c:	7dfb      	ldrb	r3, [r7, #23]
 800128e:	2b02      	cmp	r3, #2
 8001290:	f040 8103 	bne.w	800149a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d10e      	bne.n	80012b8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d116      	bne.n	80012d6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e0f7      	b.n	80014a8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d107      	bne.n	80012d6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e0e8      	b.n	80014a8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	331b      	adds	r3, #27
 80012de:	011b      	lsls	r3, r3, #4
 80012e0:	4413      	add	r3, r2
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0204 	and.w	r2, r3, #4
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d10c      	bne.n	800130e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	331b      	adds	r3, #27
 80012fc:	011b      	lsls	r3, r3, #4
 80012fe:	4413      	add	r3, r2
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	0d5b      	lsrs	r3, r3, #21
 8001304:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	e00b      	b.n	8001326 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	331b      	adds	r3, #27
 8001316:	011b      	lsls	r3, r3, #4
 8001318:	4413      	add	r3, r2
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	08db      	lsrs	r3, r3, #3
 800131e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	331b      	adds	r3, #27
 800132e:	011b      	lsls	r3, r3, #4
 8001330:	4413      	add	r3, r2
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0202 	and.w	r2, r3, #2
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	331b      	adds	r3, #27
 8001344:	011b      	lsls	r3, r3, #4
 8001346:	4413      	add	r3, r2
 8001348:	3304      	adds	r3, #4
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0308 	and.w	r3, r3, #8
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2208      	movs	r2, #8
 8001358:	611a      	str	r2, [r3, #16]
 800135a:	e00b      	b.n	8001374 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	331b      	adds	r3, #27
 8001364:	011b      	lsls	r3, r3, #4
 8001366:	4413      	add	r3, r2
 8001368:	3304      	adds	r3, #4
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 020f 	and.w	r2, r3, #15
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	331b      	adds	r3, #27
 800137c:	011b      	lsls	r3, r3, #4
 800137e:	4413      	add	r3, r2
 8001380:	3304      	adds	r3, #4
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	0a1b      	lsrs	r3, r3, #8
 8001386:	b2da      	uxtb	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	331b      	adds	r3, #27
 8001394:	011b      	lsls	r3, r3, #4
 8001396:	4413      	add	r3, r2
 8001398:	3304      	adds	r3, #4
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	0c1b      	lsrs	r3, r3, #16
 800139e:	b29a      	uxth	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	011b      	lsls	r3, r3, #4
 80013ac:	4413      	add	r3, r2
 80013ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	011b      	lsls	r3, r3, #4
 80013c2:	4413      	add	r3, r2
 80013c4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	0a1a      	lsrs	r2, r3, #8
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	3301      	adds	r3, #1
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	011b      	lsls	r3, r3, #4
 80013dc:	4413      	add	r3, r2
 80013de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	0c1a      	lsrs	r2, r3, #16
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	3302      	adds	r3, #2
 80013ea:	b2d2      	uxtb	r2, r2
 80013ec:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	011b      	lsls	r3, r3, #4
 80013f6:	4413      	add	r3, r2
 80013f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	0e1a      	lsrs	r2, r3, #24
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	3303      	adds	r3, #3
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	011b      	lsls	r3, r3, #4
 8001410:	4413      	add	r3, r2
 8001412:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	3304      	adds	r3, #4
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	011b      	lsls	r3, r3, #4
 8001428:	4413      	add	r3, r2
 800142a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	0a1a      	lsrs	r2, r3, #8
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	3305      	adds	r3, #5
 8001436:	b2d2      	uxtb	r2, r2
 8001438:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	011b      	lsls	r3, r3, #4
 8001442:	4413      	add	r3, r2
 8001444:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	0c1a      	lsrs	r2, r3, #16
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	3306      	adds	r3, #6
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	011b      	lsls	r3, r3, #4
 800145c:	4413      	add	r3, r2
 800145e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	0e1a      	lsrs	r2, r3, #24
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	3307      	adds	r3, #7
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d108      	bne.n	8001486 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	68da      	ldr	r2, [r3, #12]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f042 0220 	orr.w	r2, r2, #32
 8001482:	60da      	str	r2, [r3, #12]
 8001484:	e007      	b.n	8001496 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	691a      	ldr	r2, [r3, #16]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f042 0220 	orr.w	r2, r2, #32
 8001494:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001496:	2300      	movs	r3, #0
 8001498:	e006      	b.n	80014a8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
  }
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	371c      	adds	r7, #28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr

080014b2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80014b2:	b480      	push	{r7}
 80014b4:	b085      	sub	sp, #20
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
 80014ba:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014c2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d002      	beq.n	80014d0 <HAL_CAN_ActivateNotification+0x1e>
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d109      	bne.n	80014e4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6959      	ldr	r1, [r3, #20]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	430a      	orrs	r2, r1
 80014de:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80014e0:	2300      	movs	r3, #0
 80014e2:	e006      	b.n	80014f2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
  }
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr

080014fc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	; 0x28
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001504:	2300      	movs	r3, #0
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001538:	6a3b      	ldr	r3, [r7, #32]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b00      	cmp	r3, #0
 8001540:	d07c      	beq.n	800163c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	2b00      	cmp	r3, #0
 800154a:	d023      	beq.n	8001594 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2201      	movs	r2, #1
 8001552:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 f983 	bl	800186a <HAL_CAN_TxMailbox0CompleteCallback>
 8001564:	e016      	b.n	8001594 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b00      	cmp	r3, #0
 800156e:	d004      	beq.n	800157a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001572:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
 8001578:	e00c      	b.n	8001594 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	f003 0308 	and.w	r3, r3, #8
 8001580:	2b00      	cmp	r3, #0
 8001582:	d004      	beq.n	800158e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001586:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
 800158c:	e002      	b.n	8001594 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f986 	bl	80018a0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159a:	2b00      	cmp	r3, #0
 800159c:	d024      	beq.n	80015e8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015a6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 f962 	bl	800187c <HAL_CAN_TxMailbox1CompleteCallback>
 80015b8:	e016      	b.n	80015e8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d004      	beq.n	80015ce <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80015c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
 80015cc:	e00c      	b.n	80015e8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d004      	beq.n	80015e2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
 80015e0:	e002      	b.n	80015e8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 f965 	bl	80018b2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d024      	beq.n	800163c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015fa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 f941 	bl	800188e <HAL_CAN_TxMailbox2CompleteCallback>
 800160c:	e016      	b.n	800163c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d004      	beq.n	8001622 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
 8001620:	e00c      	b.n	800163c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d004      	beq.n	8001636 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
 8001634:	e002      	b.n	800163c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 f944 	bl	80018c4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800163c:	6a3b      	ldr	r3, [r7, #32]
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00c      	beq.n	8001660 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	2b00      	cmp	r3, #0
 800164e:	d007      	beq.n	8001660 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001656:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2210      	movs	r2, #16
 800165e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001660:	6a3b      	ldr	r3, [r7, #32]
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	2b00      	cmp	r3, #0
 8001668:	d00b      	beq.n	8001682 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	f003 0308 	and.w	r3, r3, #8
 8001670:	2b00      	cmp	r3, #0
 8001672:	d006      	beq.n	8001682 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2208      	movs	r2, #8
 800167a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 f933 	bl	80018e8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001682:	6a3b      	ldr	r3, [r7, #32]
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d009      	beq.n	80016a0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d002      	beq.n	80016a0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 f91b 	bl	80018d6 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80016a0:	6a3b      	ldr	r3, [r7, #32]
 80016a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d00c      	beq.n	80016c4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	f003 0310 	and.w	r3, r3, #16
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d007      	beq.n	80016c4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2210      	movs	r2, #16
 80016c2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80016c4:	6a3b      	ldr	r3, [r7, #32]
 80016c6:	f003 0320 	and.w	r3, r3, #32
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00b      	beq.n	80016e6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d006      	beq.n	80016e6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2208      	movs	r2, #8
 80016de:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f000 f90a 	bl	80018fa <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80016e6:	6a3b      	ldr	r3, [r7, #32]
 80016e8:	f003 0310 	and.w	r3, r3, #16
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d009      	beq.n	8001704 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	f003 0303 	and.w	r3, r3, #3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d002      	beq.n	8001704 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7fe fd24 	bl	800014c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001704:	6a3b      	ldr	r3, [r7, #32]
 8001706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00b      	beq.n	8001726 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	f003 0310 	and.w	r3, r3, #16
 8001714:	2b00      	cmp	r3, #0
 8001716:	d006      	beq.n	8001726 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2210      	movs	r2, #16
 800171e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f000 f8f3 	bl	800190c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001726:	6a3b      	ldr	r3, [r7, #32]
 8001728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00b      	beq.n	8001748 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f003 0308 	and.w	r3, r3, #8
 8001736:	2b00      	cmp	r3, #0
 8001738:	d006      	beq.n	8001748 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2208      	movs	r2, #8
 8001740:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 f8eb 	bl	800191e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001748:	6a3b      	ldr	r3, [r7, #32]
 800174a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d07b      	beq.n	800184a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b00      	cmp	r3, #0
 800175a:	d072      	beq.n	8001842 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001762:	2b00      	cmp	r3, #0
 8001764:	d008      	beq.n	8001778 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800176c:	2b00      	cmp	r3, #0
 800176e:	d003      	beq.n	8001778 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001778:	6a3b      	ldr	r3, [r7, #32]
 800177a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800177e:	2b00      	cmp	r3, #0
 8001780:	d008      	beq.n	8001794 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178e:	f043 0302 	orr.w	r3, r3, #2
 8001792:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001794:	6a3b      	ldr	r3, [r7, #32]
 8001796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800179a:	2b00      	cmp	r3, #0
 800179c:	d008      	beq.n	80017b0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d003      	beq.n	80017b0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	f043 0304 	orr.w	r3, r3, #4
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80017b0:	6a3b      	ldr	r3, [r7, #32]
 80017b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d043      	beq.n	8001842 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d03e      	beq.n	8001842 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80017ca:	2b60      	cmp	r3, #96	; 0x60
 80017cc:	d02b      	beq.n	8001826 <HAL_CAN_IRQHandler+0x32a>
 80017ce:	2b60      	cmp	r3, #96	; 0x60
 80017d0:	d82e      	bhi.n	8001830 <HAL_CAN_IRQHandler+0x334>
 80017d2:	2b50      	cmp	r3, #80	; 0x50
 80017d4:	d022      	beq.n	800181c <HAL_CAN_IRQHandler+0x320>
 80017d6:	2b50      	cmp	r3, #80	; 0x50
 80017d8:	d82a      	bhi.n	8001830 <HAL_CAN_IRQHandler+0x334>
 80017da:	2b40      	cmp	r3, #64	; 0x40
 80017dc:	d019      	beq.n	8001812 <HAL_CAN_IRQHandler+0x316>
 80017de:	2b40      	cmp	r3, #64	; 0x40
 80017e0:	d826      	bhi.n	8001830 <HAL_CAN_IRQHandler+0x334>
 80017e2:	2b30      	cmp	r3, #48	; 0x30
 80017e4:	d010      	beq.n	8001808 <HAL_CAN_IRQHandler+0x30c>
 80017e6:	2b30      	cmp	r3, #48	; 0x30
 80017e8:	d822      	bhi.n	8001830 <HAL_CAN_IRQHandler+0x334>
 80017ea:	2b10      	cmp	r3, #16
 80017ec:	d002      	beq.n	80017f4 <HAL_CAN_IRQHandler+0x2f8>
 80017ee:	2b20      	cmp	r3, #32
 80017f0:	d005      	beq.n	80017fe <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80017f2:	e01d      	b.n	8001830 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	f043 0308 	orr.w	r3, r3, #8
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017fc:	e019      	b.n	8001832 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	f043 0310 	orr.w	r3, r3, #16
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001806:	e014      	b.n	8001832 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	f043 0320 	orr.w	r3, r3, #32
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001810:	e00f      	b.n	8001832 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800181a:	e00a      	b.n	8001832 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001824:	e005      	b.n	8001832 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800182e:	e000      	b.n	8001832 <HAL_CAN_IRQHandler+0x336>
            break;
 8001830:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	699a      	ldr	r2, [r3, #24]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001840:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2204      	movs	r2, #4
 8001848:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	2b00      	cmp	r3, #0
 800184e:	d008      	beq.n	8001862 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	431a      	orrs	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f000 f867 	bl	8001930 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001862:	bf00      	nop
 8001864:	3728      	adds	r7, #40	; 0x28
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr

0800188e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr

080018a0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr

080018b2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr

080018c4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr

080018d6 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b083      	sub	sp, #12
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr

080018e8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr

080018fa <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr

0800190c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr

0800191e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr

08001930 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr
	...

08001944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001954:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <__NVIC_SetPriorityGrouping+0x44>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001960:	4013      	ands	r3, r2
 8001962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800196c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001976:	4a04      	ldr	r2, [pc, #16]	; (8001988 <__NVIC_SetPriorityGrouping+0x44>)
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	60d3      	str	r3, [r2, #12]
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	bc80      	pop	{r7}
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001990:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	0a1b      	lsrs	r3, r3, #8
 8001996:	f003 0307 	and.w	r3, r3, #7
}
 800199a:	4618      	mov	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	db0b      	blt.n	80019d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	f003 021f 	and.w	r2, r3, #31
 80019c0:	4906      	ldr	r1, [pc, #24]	; (80019dc <__NVIC_EnableIRQ+0x34>)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	095b      	lsrs	r3, r3, #5
 80019c8:	2001      	movs	r0, #1
 80019ca:	fa00 f202 	lsl.w	r2, r0, r2
 80019ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr
 80019dc:	e000e100 	.word	0xe000e100

080019e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	6039      	str	r1, [r7, #0]
 80019ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	db0a      	blt.n	8001a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	490c      	ldr	r1, [pc, #48]	; (8001a2c <__NVIC_SetPriority+0x4c>)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	0112      	lsls	r2, r2, #4
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	440b      	add	r3, r1
 8001a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a08:	e00a      	b.n	8001a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	4908      	ldr	r1, [pc, #32]	; (8001a30 <__NVIC_SetPriority+0x50>)
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	f003 030f 	and.w	r3, r3, #15
 8001a16:	3b04      	subs	r3, #4
 8001a18:	0112      	lsls	r2, r2, #4
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	761a      	strb	r2, [r3, #24]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000e100 	.word	0xe000e100
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b089      	sub	sp, #36	; 0x24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f1c3 0307 	rsb	r3, r3, #7
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	bf28      	it	cs
 8001a52:	2304      	movcs	r3, #4
 8001a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	2b06      	cmp	r3, #6
 8001a5c:	d902      	bls.n	8001a64 <NVIC_EncodePriority+0x30>
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3b03      	subs	r3, #3
 8001a62:	e000      	b.n	8001a66 <NVIC_EncodePriority+0x32>
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	f04f 32ff 	mov.w	r2, #4294967295
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43da      	mvns	r2, r3
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	401a      	ands	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	fa01 f303 	lsl.w	r3, r1, r3
 8001a86:	43d9      	mvns	r1, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	4313      	orrs	r3, r2
         );
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3724      	adds	r7, #36	; 0x24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr

08001a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aa8:	d301      	bcc.n	8001aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e00f      	b.n	8001ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aae:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <SysTick_Config+0x40>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ab6:	210f      	movs	r1, #15
 8001ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8001abc:	f7ff ff90 	bl	80019e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <SysTick_Config+0x40>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac6:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <SysTick_Config+0x40>)
 8001ac8:	2207      	movs	r2, #7
 8001aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	e000e010 	.word	0xe000e010

08001adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff ff2d 	bl	8001944 <__NVIC_SetPriorityGrouping>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	4603      	mov	r3, r0
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b04:	f7ff ff42 	bl	800198c <__NVIC_GetPriorityGrouping>
 8001b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	68b9      	ldr	r1, [r7, #8]
 8001b0e:	6978      	ldr	r0, [r7, #20]
 8001b10:	f7ff ff90 	bl	8001a34 <NVIC_EncodePriority>
 8001b14:	4602      	mov	r2, r0
 8001b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff5f 	bl	80019e0 <__NVIC_SetPriority>
}
 8001b22:	bf00      	nop
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	4603      	mov	r3, r0
 8001b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff35 	bl	80019a8 <__NVIC_EnableIRQ>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff ffa2 	bl	8001a98 <SysTick_Config>
 8001b54:	4603      	mov	r3, r0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b08b      	sub	sp, #44	; 0x2c
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b72:	e169      	b.n	8001e48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b74:	2201      	movs	r2, #1
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	69fa      	ldr	r2, [r7, #28]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	f040 8158 	bne.w	8001e42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	4a9a      	ldr	r2, [pc, #616]	; (8001e00 <HAL_GPIO_Init+0x2a0>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d05e      	beq.n	8001c5a <HAL_GPIO_Init+0xfa>
 8001b9c:	4a98      	ldr	r2, [pc, #608]	; (8001e00 <HAL_GPIO_Init+0x2a0>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d875      	bhi.n	8001c8e <HAL_GPIO_Init+0x12e>
 8001ba2:	4a98      	ldr	r2, [pc, #608]	; (8001e04 <HAL_GPIO_Init+0x2a4>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d058      	beq.n	8001c5a <HAL_GPIO_Init+0xfa>
 8001ba8:	4a96      	ldr	r2, [pc, #600]	; (8001e04 <HAL_GPIO_Init+0x2a4>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d86f      	bhi.n	8001c8e <HAL_GPIO_Init+0x12e>
 8001bae:	4a96      	ldr	r2, [pc, #600]	; (8001e08 <HAL_GPIO_Init+0x2a8>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d052      	beq.n	8001c5a <HAL_GPIO_Init+0xfa>
 8001bb4:	4a94      	ldr	r2, [pc, #592]	; (8001e08 <HAL_GPIO_Init+0x2a8>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d869      	bhi.n	8001c8e <HAL_GPIO_Init+0x12e>
 8001bba:	4a94      	ldr	r2, [pc, #592]	; (8001e0c <HAL_GPIO_Init+0x2ac>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d04c      	beq.n	8001c5a <HAL_GPIO_Init+0xfa>
 8001bc0:	4a92      	ldr	r2, [pc, #584]	; (8001e0c <HAL_GPIO_Init+0x2ac>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d863      	bhi.n	8001c8e <HAL_GPIO_Init+0x12e>
 8001bc6:	4a92      	ldr	r2, [pc, #584]	; (8001e10 <HAL_GPIO_Init+0x2b0>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d046      	beq.n	8001c5a <HAL_GPIO_Init+0xfa>
 8001bcc:	4a90      	ldr	r2, [pc, #576]	; (8001e10 <HAL_GPIO_Init+0x2b0>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d85d      	bhi.n	8001c8e <HAL_GPIO_Init+0x12e>
 8001bd2:	2b12      	cmp	r3, #18
 8001bd4:	d82a      	bhi.n	8001c2c <HAL_GPIO_Init+0xcc>
 8001bd6:	2b12      	cmp	r3, #18
 8001bd8:	d859      	bhi.n	8001c8e <HAL_GPIO_Init+0x12e>
 8001bda:	a201      	add	r2, pc, #4	; (adr r2, 8001be0 <HAL_GPIO_Init+0x80>)
 8001bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be0:	08001c5b 	.word	0x08001c5b
 8001be4:	08001c35 	.word	0x08001c35
 8001be8:	08001c47 	.word	0x08001c47
 8001bec:	08001c89 	.word	0x08001c89
 8001bf0:	08001c8f 	.word	0x08001c8f
 8001bf4:	08001c8f 	.word	0x08001c8f
 8001bf8:	08001c8f 	.word	0x08001c8f
 8001bfc:	08001c8f 	.word	0x08001c8f
 8001c00:	08001c8f 	.word	0x08001c8f
 8001c04:	08001c8f 	.word	0x08001c8f
 8001c08:	08001c8f 	.word	0x08001c8f
 8001c0c:	08001c8f 	.word	0x08001c8f
 8001c10:	08001c8f 	.word	0x08001c8f
 8001c14:	08001c8f 	.word	0x08001c8f
 8001c18:	08001c8f 	.word	0x08001c8f
 8001c1c:	08001c8f 	.word	0x08001c8f
 8001c20:	08001c8f 	.word	0x08001c8f
 8001c24:	08001c3d 	.word	0x08001c3d
 8001c28:	08001c51 	.word	0x08001c51
 8001c2c:	4a79      	ldr	r2, [pc, #484]	; (8001e14 <HAL_GPIO_Init+0x2b4>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d013      	beq.n	8001c5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c32:	e02c      	b.n	8001c8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	623b      	str	r3, [r7, #32]
          break;
 8001c3a:	e029      	b.n	8001c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	3304      	adds	r3, #4
 8001c42:	623b      	str	r3, [r7, #32]
          break;
 8001c44:	e024      	b.n	8001c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	3308      	adds	r3, #8
 8001c4c:	623b      	str	r3, [r7, #32]
          break;
 8001c4e:	e01f      	b.n	8001c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	330c      	adds	r3, #12
 8001c56:	623b      	str	r3, [r7, #32]
          break;
 8001c58:	e01a      	b.n	8001c90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d102      	bne.n	8001c68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c62:	2304      	movs	r3, #4
 8001c64:	623b      	str	r3, [r7, #32]
          break;
 8001c66:	e013      	b.n	8001c90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d105      	bne.n	8001c7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c70:	2308      	movs	r3, #8
 8001c72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69fa      	ldr	r2, [r7, #28]
 8001c78:	611a      	str	r2, [r3, #16]
          break;
 8001c7a:	e009      	b.n	8001c90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c7c:	2308      	movs	r3, #8
 8001c7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	69fa      	ldr	r2, [r7, #28]
 8001c84:	615a      	str	r2, [r3, #20]
          break;
 8001c86:	e003      	b.n	8001c90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	623b      	str	r3, [r7, #32]
          break;
 8001c8c:	e000      	b.n	8001c90 <HAL_GPIO_Init+0x130>
          break;
 8001c8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	2bff      	cmp	r3, #255	; 0xff
 8001c94:	d801      	bhi.n	8001c9a <HAL_GPIO_Init+0x13a>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	e001      	b.n	8001c9e <HAL_GPIO_Init+0x13e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	2bff      	cmp	r3, #255	; 0xff
 8001ca4:	d802      	bhi.n	8001cac <HAL_GPIO_Init+0x14c>
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	e002      	b.n	8001cb2 <HAL_GPIO_Init+0x152>
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	3b08      	subs	r3, #8
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	210f      	movs	r1, #15
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	6a39      	ldr	r1, [r7, #32]
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 80b1 	beq.w	8001e42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ce0:	4b4d      	ldr	r3, [pc, #308]	; (8001e18 <HAL_GPIO_Init+0x2b8>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	4a4c      	ldr	r2, [pc, #304]	; (8001e18 <HAL_GPIO_Init+0x2b8>)
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	6193      	str	r3, [r2, #24]
 8001cec:	4b4a      	ldr	r3, [pc, #296]	; (8001e18 <HAL_GPIO_Init+0x2b8>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cf8:	4a48      	ldr	r2, [pc, #288]	; (8001e1c <HAL_GPIO_Init+0x2bc>)
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	089b      	lsrs	r3, r3, #2
 8001cfe:	3302      	adds	r3, #2
 8001d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	f003 0303 	and.w	r3, r3, #3
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	220f      	movs	r2, #15
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a40      	ldr	r2, [pc, #256]	; (8001e20 <HAL_GPIO_Init+0x2c0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d013      	beq.n	8001d4c <HAL_GPIO_Init+0x1ec>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a3f      	ldr	r2, [pc, #252]	; (8001e24 <HAL_GPIO_Init+0x2c4>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d00d      	beq.n	8001d48 <HAL_GPIO_Init+0x1e8>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a3e      	ldr	r2, [pc, #248]	; (8001e28 <HAL_GPIO_Init+0x2c8>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d007      	beq.n	8001d44 <HAL_GPIO_Init+0x1e4>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a3d      	ldr	r2, [pc, #244]	; (8001e2c <HAL_GPIO_Init+0x2cc>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d101      	bne.n	8001d40 <HAL_GPIO_Init+0x1e0>
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e006      	b.n	8001d4e <HAL_GPIO_Init+0x1ee>
 8001d40:	2304      	movs	r3, #4
 8001d42:	e004      	b.n	8001d4e <HAL_GPIO_Init+0x1ee>
 8001d44:	2302      	movs	r3, #2
 8001d46:	e002      	b.n	8001d4e <HAL_GPIO_Init+0x1ee>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e000      	b.n	8001d4e <HAL_GPIO_Init+0x1ee>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d50:	f002 0203 	and.w	r2, r2, #3
 8001d54:	0092      	lsls	r2, r2, #2
 8001d56:	4093      	lsls	r3, r2
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d5e:	492f      	ldr	r1, [pc, #188]	; (8001e1c <HAL_GPIO_Init+0x2bc>)
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	089b      	lsrs	r3, r3, #2
 8001d64:	3302      	adds	r3, #2
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d006      	beq.n	8001d86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d78:	4b2d      	ldr	r3, [pc, #180]	; (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	492c      	ldr	r1, [pc, #176]	; (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	608b      	str	r3, [r1, #8]
 8001d84:	e006      	b.n	8001d94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d86:	4b2a      	ldr	r3, [pc, #168]	; (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	4928      	ldr	r1, [pc, #160]	; (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001d90:	4013      	ands	r3, r2
 8001d92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d006      	beq.n	8001dae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001da0:	4b23      	ldr	r3, [pc, #140]	; (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001da2:	68da      	ldr	r2, [r3, #12]
 8001da4:	4922      	ldr	r1, [pc, #136]	; (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	60cb      	str	r3, [r1, #12]
 8001dac:	e006      	b.n	8001dbc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dae:	4b20      	ldr	r3, [pc, #128]	; (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	491e      	ldr	r1, [pc, #120]	; (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d006      	beq.n	8001dd6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001dc8:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	4918      	ldr	r1, [pc, #96]	; (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	604b      	str	r3, [r1, #4]
 8001dd4:	e006      	b.n	8001de4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dd6:	4b16      	ldr	r3, [pc, #88]	; (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	4914      	ldr	r1, [pc, #80]	; (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001de0:	4013      	ands	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d021      	beq.n	8001e34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001df0:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	490e      	ldr	r1, [pc, #56]	; (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	600b      	str	r3, [r1, #0]
 8001dfc:	e021      	b.n	8001e42 <HAL_GPIO_Init+0x2e2>
 8001dfe:	bf00      	nop
 8001e00:	10320000 	.word	0x10320000
 8001e04:	10310000 	.word	0x10310000
 8001e08:	10220000 	.word	0x10220000
 8001e0c:	10210000 	.word	0x10210000
 8001e10:	10120000 	.word	0x10120000
 8001e14:	10110000 	.word	0x10110000
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40010000 	.word	0x40010000
 8001e20:	40010800 	.word	0x40010800
 8001e24:	40010c00 	.word	0x40010c00
 8001e28:	40011000 	.word	0x40011000
 8001e2c:	40011400 	.word	0x40011400
 8001e30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <HAL_GPIO_Init+0x304>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	4909      	ldr	r1, [pc, #36]	; (8001e64 <HAL_GPIO_Init+0x304>)
 8001e3e:	4013      	ands	r3, r2
 8001e40:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	3301      	adds	r3, #1
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f47f ae8e 	bne.w	8001b74 <HAL_GPIO_Init+0x14>
  }
}
 8001e58:	bf00      	nop
 8001e5a:	bf00      	nop
 8001e5c:	372c      	adds	r7, #44	; 0x2c
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr
 8001e64:	40010400 	.word	0x40010400

08001e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	807b      	strh	r3, [r7, #2]
 8001e74:	4613      	mov	r3, r2
 8001e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e78:	787b      	ldrb	r3, [r7, #1]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e7e:	887a      	ldrh	r2, [r7, #2]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e84:	e003      	b.n	8001e8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e86:	887b      	ldrh	r3, [r7, #2]
 8001e88:	041a      	lsls	r2, r3, #16
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	611a      	str	r2, [r3, #16]
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr

08001e98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e12b      	b.n	8002102 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d106      	bne.n	8001ec4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7fe fe76 	bl	8000bb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2224      	movs	r2, #36	; 0x24
 8001ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0201 	bic.w	r2, r2, #1
 8001eda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001efa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001efc:	f001 f840 	bl	8002f80 <HAL_RCC_GetPCLK1Freq>
 8001f00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	4a81      	ldr	r2, [pc, #516]	; (800210c <HAL_I2C_Init+0x274>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d807      	bhi.n	8001f1c <HAL_I2C_Init+0x84>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4a80      	ldr	r2, [pc, #512]	; (8002110 <HAL_I2C_Init+0x278>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	bf94      	ite	ls
 8001f14:	2301      	movls	r3, #1
 8001f16:	2300      	movhi	r3, #0
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	e006      	b.n	8001f2a <HAL_I2C_Init+0x92>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4a7d      	ldr	r2, [pc, #500]	; (8002114 <HAL_I2C_Init+0x27c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	bf94      	ite	ls
 8001f24:	2301      	movls	r3, #1
 8001f26:	2300      	movhi	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e0e7      	b.n	8002102 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	4a78      	ldr	r2, [pc, #480]	; (8002118 <HAL_I2C_Init+0x280>)
 8001f36:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3a:	0c9b      	lsrs	r3, r3, #18
 8001f3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68ba      	ldr	r2, [r7, #8]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	4a6a      	ldr	r2, [pc, #424]	; (800210c <HAL_I2C_Init+0x274>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d802      	bhi.n	8001f6c <HAL_I2C_Init+0xd4>
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	e009      	b.n	8001f80 <HAL_I2C_Init+0xe8>
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f72:	fb02 f303 	mul.w	r3, r2, r3
 8001f76:	4a69      	ldr	r2, [pc, #420]	; (800211c <HAL_I2C_Init+0x284>)
 8001f78:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7c:	099b      	lsrs	r3, r3, #6
 8001f7e:	3301      	adds	r3, #1
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	430b      	orrs	r3, r1
 8001f86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	495c      	ldr	r1, [pc, #368]	; (800210c <HAL_I2C_Init+0x274>)
 8001f9c:	428b      	cmp	r3, r1
 8001f9e:	d819      	bhi.n	8001fd4 <HAL_I2C_Init+0x13c>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	1e59      	subs	r1, r3, #1
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fae:	1c59      	adds	r1, r3, #1
 8001fb0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001fb4:	400b      	ands	r3, r1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00a      	beq.n	8001fd0 <HAL_I2C_Init+0x138>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	1e59      	subs	r1, r3, #1
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fc8:	3301      	adds	r3, #1
 8001fca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fce:	e051      	b.n	8002074 <HAL_I2C_Init+0x1dc>
 8001fd0:	2304      	movs	r3, #4
 8001fd2:	e04f      	b.n	8002074 <HAL_I2C_Init+0x1dc>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d111      	bne.n	8002000 <HAL_I2C_Init+0x168>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	1e58      	subs	r0, r3, #1
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6859      	ldr	r1, [r3, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	440b      	add	r3, r1
 8001fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fee:	3301      	adds	r3, #1
 8001ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	bf0c      	ite	eq
 8001ff8:	2301      	moveq	r3, #1
 8001ffa:	2300      	movne	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	e012      	b.n	8002026 <HAL_I2C_Init+0x18e>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	1e58      	subs	r0, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6859      	ldr	r1, [r3, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	0099      	lsls	r1, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	fbb0 f3f3 	udiv	r3, r0, r3
 8002016:	3301      	adds	r3, #1
 8002018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800201c:	2b00      	cmp	r3, #0
 800201e:	bf0c      	ite	eq
 8002020:	2301      	moveq	r3, #1
 8002022:	2300      	movne	r3, #0
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_I2C_Init+0x196>
 800202a:	2301      	movs	r3, #1
 800202c:	e022      	b.n	8002074 <HAL_I2C_Init+0x1dc>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10e      	bne.n	8002054 <HAL_I2C_Init+0x1bc>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	1e58      	subs	r0, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6859      	ldr	r1, [r3, #4]
 800203e:	460b      	mov	r3, r1
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	440b      	add	r3, r1
 8002044:	fbb0 f3f3 	udiv	r3, r0, r3
 8002048:	3301      	adds	r3, #1
 800204a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800204e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002052:	e00f      	b.n	8002074 <HAL_I2C_Init+0x1dc>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	1e58      	subs	r0, r3, #1
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6859      	ldr	r1, [r3, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	440b      	add	r3, r1
 8002062:	0099      	lsls	r1, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	fbb0 f3f3 	udiv	r3, r0, r3
 800206a:	3301      	adds	r3, #1
 800206c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002070:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	6809      	ldr	r1, [r1, #0]
 8002078:	4313      	orrs	r3, r2
 800207a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69da      	ldr	r2, [r3, #28]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80020a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6911      	ldr	r1, [r2, #16]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	68d2      	ldr	r2, [r2, #12]
 80020ae:	4311      	orrs	r1, r2
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	6812      	ldr	r2, [r2, #0]
 80020b4:	430b      	orrs	r3, r1
 80020b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	695a      	ldr	r2, [r3, #20]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	431a      	orrs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f042 0201 	orr.w	r2, r2, #1
 80020e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2220      	movs	r2, #32
 80020ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	000186a0 	.word	0x000186a0
 8002110:	001e847f 	.word	0x001e847f
 8002114:	003d08ff 	.word	0x003d08ff
 8002118:	431bde83 	.word	0x431bde83
 800211c:	10624dd3 	.word	0x10624dd3

08002120 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b088      	sub	sp, #32
 8002124:	af02      	add	r7, sp, #8
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	4608      	mov	r0, r1
 800212a:	4611      	mov	r1, r2
 800212c:	461a      	mov	r2, r3
 800212e:	4603      	mov	r3, r0
 8002130:	817b      	strh	r3, [r7, #10]
 8002132:	460b      	mov	r3, r1
 8002134:	813b      	strh	r3, [r7, #8]
 8002136:	4613      	mov	r3, r2
 8002138:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800213a:	f7fe fe63 	bl	8000e04 <HAL_GetTick>
 800213e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b20      	cmp	r3, #32
 800214a:	f040 80d9 	bne.w	8002300 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	2319      	movs	r3, #25
 8002154:	2201      	movs	r2, #1
 8002156:	496d      	ldr	r1, [pc, #436]	; (800230c <HAL_I2C_Mem_Write+0x1ec>)
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f000 f971 	bl	8002440 <I2C_WaitOnFlagUntilTimeout>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002164:	2302      	movs	r3, #2
 8002166:	e0cc      	b.n	8002302 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_I2C_Mem_Write+0x56>
 8002172:	2302      	movs	r3, #2
 8002174:	e0c5      	b.n	8002302 <HAL_I2C_Mem_Write+0x1e2>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b01      	cmp	r3, #1
 800218a:	d007      	beq.n	800219c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0201 	orr.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2221      	movs	r2, #33	; 0x21
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2240      	movs	r2, #64	; 0x40
 80021b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6a3a      	ldr	r2, [r7, #32]
 80021c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80021cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4a4d      	ldr	r2, [pc, #308]	; (8002310 <HAL_I2C_Mem_Write+0x1f0>)
 80021dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021de:	88f8      	ldrh	r0, [r7, #6]
 80021e0:	893a      	ldrh	r2, [r7, #8]
 80021e2:	8979      	ldrh	r1, [r7, #10]
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	9301      	str	r3, [sp, #4]
 80021e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	4603      	mov	r3, r0
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 f890 	bl	8002314 <I2C_RequestMemoryWrite>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d052      	beq.n	80022a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e081      	b.n	8002302 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 fa36 	bl	8002674 <I2C_WaitOnTXEFlagUntilTimeout>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00d      	beq.n	800222a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	2b04      	cmp	r3, #4
 8002214:	d107      	bne.n	8002226 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002224:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e06b      	b.n	8002302 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	781a      	ldrb	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002244:	3b01      	subs	r3, #1
 8002246:	b29a      	uxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002250:	b29b      	uxth	r3, r3
 8002252:	3b01      	subs	r3, #1
 8002254:	b29a      	uxth	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b04      	cmp	r3, #4
 8002266:	d11b      	bne.n	80022a0 <HAL_I2C_Mem_Write+0x180>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226c:	2b00      	cmp	r3, #0
 800226e:	d017      	beq.n	80022a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	781a      	ldrb	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	1c5a      	adds	r2, r3, #1
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228a:	3b01      	subs	r3, #1
 800228c:	b29a      	uxth	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002296:	b29b      	uxth	r3, r3
 8002298:	3b01      	subs	r3, #1
 800229a:	b29a      	uxth	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1aa      	bne.n	80021fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 fa29 	bl	8002704 <I2C_WaitOnBTFFlagUntilTimeout>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00d      	beq.n	80022d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d107      	bne.n	80022d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e016      	b.n	8002302 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022fc:	2300      	movs	r3, #0
 80022fe:	e000      	b.n	8002302 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002300:	2302      	movs	r3, #2
  }
}
 8002302:	4618      	mov	r0, r3
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	00100002 	.word	0x00100002
 8002310:	ffff0000 	.word	0xffff0000

08002314 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af02      	add	r7, sp, #8
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	4608      	mov	r0, r1
 800231e:	4611      	mov	r1, r2
 8002320:	461a      	mov	r2, r3
 8002322:	4603      	mov	r3, r0
 8002324:	817b      	strh	r3, [r7, #10]
 8002326:	460b      	mov	r3, r1
 8002328:	813b      	strh	r3, [r7, #8]
 800232a:	4613      	mov	r3, r2
 800232c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800233c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	6a3b      	ldr	r3, [r7, #32]
 8002344:	2200      	movs	r2, #0
 8002346:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 f878 	bl	8002440 <I2C_WaitOnFlagUntilTimeout>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00d      	beq.n	8002372 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002364:	d103      	bne.n	800236e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f44f 7200 	mov.w	r2, #512	; 0x200
 800236c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e05f      	b.n	8002432 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002372:	897b      	ldrh	r3, [r7, #10]
 8002374:	b2db      	uxtb	r3, r3
 8002376:	461a      	mov	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002380:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	6a3a      	ldr	r2, [r7, #32]
 8002386:	492d      	ldr	r1, [pc, #180]	; (800243c <I2C_RequestMemoryWrite+0x128>)
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f000 f8d3 	bl	8002534 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e04c      	b.n	8002432 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	617b      	str	r3, [r7, #20]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	617b      	str	r3, [r7, #20]
 80023ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b0:	6a39      	ldr	r1, [r7, #32]
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 f95e 	bl	8002674 <I2C_WaitOnTXEFlagUntilTimeout>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00d      	beq.n	80023da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d107      	bne.n	80023d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e02b      	b.n	8002432 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d105      	bne.n	80023ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023e0:	893b      	ldrh	r3, [r7, #8]
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	611a      	str	r2, [r3, #16]
 80023ea:	e021      	b.n	8002430 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80023ec:	893b      	ldrh	r3, [r7, #8]
 80023ee:	0a1b      	lsrs	r3, r3, #8
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023fc:	6a39      	ldr	r1, [r7, #32]
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f000 f938 	bl	8002674 <I2C_WaitOnTXEFlagUntilTimeout>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00d      	beq.n	8002426 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	2b04      	cmp	r3, #4
 8002410:	d107      	bne.n	8002422 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002420:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e005      	b.n	8002432 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002426:	893b      	ldrh	r3, [r7, #8]
 8002428:	b2da      	uxtb	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	00010002 	.word	0x00010002

08002440 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	603b      	str	r3, [r7, #0]
 800244c:	4613      	mov	r3, r2
 800244e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002450:	e048      	b.n	80024e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002458:	d044      	beq.n	80024e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800245a:	f7fe fcd3 	bl	8000e04 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	429a      	cmp	r2, r3
 8002468:	d302      	bcc.n	8002470 <I2C_WaitOnFlagUntilTimeout+0x30>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d139      	bne.n	80024e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	0c1b      	lsrs	r3, r3, #16
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b01      	cmp	r3, #1
 8002478:	d10d      	bne.n	8002496 <I2C_WaitOnFlagUntilTimeout+0x56>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	43da      	mvns	r2, r3
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	4013      	ands	r3, r2
 8002486:	b29b      	uxth	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	bf0c      	ite	eq
 800248c:	2301      	moveq	r3, #1
 800248e:	2300      	movne	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	461a      	mov	r2, r3
 8002494:	e00c      	b.n	80024b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	43da      	mvns	r2, r3
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	4013      	ands	r3, r2
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	bf0c      	ite	eq
 80024a8:	2301      	moveq	r3, #1
 80024aa:	2300      	movne	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	461a      	mov	r2, r3
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d116      	bne.n	80024e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2220      	movs	r2, #32
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	f043 0220 	orr.w	r2, r3, #32
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e023      	b.n	800252c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	0c1b      	lsrs	r3, r3, #16
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d10d      	bne.n	800250a <I2C_WaitOnFlagUntilTimeout+0xca>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	43da      	mvns	r2, r3
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	4013      	ands	r3, r2
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	bf0c      	ite	eq
 8002500:	2301      	moveq	r3, #1
 8002502:	2300      	movne	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	461a      	mov	r2, r3
 8002508:	e00c      	b.n	8002524 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	43da      	mvns	r2, r3
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	4013      	ands	r3, r2
 8002516:	b29b      	uxth	r3, r3
 8002518:	2b00      	cmp	r3, #0
 800251a:	bf0c      	ite	eq
 800251c:	2301      	moveq	r3, #1
 800251e:	2300      	movne	r3, #0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	461a      	mov	r2, r3
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	429a      	cmp	r2, r3
 8002528:	d093      	beq.n	8002452 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
 8002540:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002542:	e071      	b.n	8002628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800254e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002552:	d123      	bne.n	800259c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002562:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800256c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2220      	movs	r2, #32
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	f043 0204 	orr.w	r2, r3, #4
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e067      	b.n	800266c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a2:	d041      	beq.n	8002628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025a4:	f7fe fc2e 	bl	8000e04 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d302      	bcc.n	80025ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d136      	bne.n	8002628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	0c1b      	lsrs	r3, r3, #16
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d10c      	bne.n	80025de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	43da      	mvns	r2, r3
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	4013      	ands	r3, r2
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	bf14      	ite	ne
 80025d6:	2301      	movne	r3, #1
 80025d8:	2300      	moveq	r3, #0
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	e00b      	b.n	80025f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	43da      	mvns	r2, r3
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	4013      	ands	r3, r2
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	bf14      	ite	ne
 80025f0:	2301      	movne	r3, #1
 80025f2:	2300      	moveq	r3, #0
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d016      	beq.n	8002628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2220      	movs	r2, #32
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002614:	f043 0220 	orr.w	r2, r3, #32
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e021      	b.n	800266c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	0c1b      	lsrs	r3, r3, #16
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b01      	cmp	r3, #1
 8002630:	d10c      	bne.n	800264c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	43da      	mvns	r2, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	4013      	ands	r3, r2
 800263e:	b29b      	uxth	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	bf14      	ite	ne
 8002644:	2301      	movne	r3, #1
 8002646:	2300      	moveq	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	e00b      	b.n	8002664 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	43da      	mvns	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	4013      	ands	r3, r2
 8002658:	b29b      	uxth	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	bf14      	ite	ne
 800265e:	2301      	movne	r3, #1
 8002660:	2300      	moveq	r3, #0
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	f47f af6d 	bne.w	8002544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002680:	e034      	b.n	80026ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 f886 	bl	8002794 <I2C_IsAcknowledgeFailed>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e034      	b.n	80026fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002698:	d028      	beq.n	80026ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800269a:	f7fe fbb3 	bl	8000e04 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d302      	bcc.n	80026b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d11d      	bne.n	80026ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ba:	2b80      	cmp	r3, #128	; 0x80
 80026bc:	d016      	beq.n	80026ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2220      	movs	r2, #32
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	f043 0220 	orr.w	r2, r3, #32
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e007      	b.n	80026fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f6:	2b80      	cmp	r3, #128	; 0x80
 80026f8:	d1c3      	bne.n	8002682 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002710:	e034      	b.n	800277c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 f83e 	bl	8002794 <I2C_IsAcknowledgeFailed>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e034      	b.n	800278c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002728:	d028      	beq.n	800277c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800272a:	f7fe fb6b 	bl	8000e04 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	68ba      	ldr	r2, [r7, #8]
 8002736:	429a      	cmp	r2, r3
 8002738:	d302      	bcc.n	8002740 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d11d      	bne.n	800277c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	f003 0304 	and.w	r3, r3, #4
 800274a:	2b04      	cmp	r3, #4
 800274c:	d016      	beq.n	800277c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2220      	movs	r2, #32
 8002758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	f043 0220 	orr.w	r2, r3, #32
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e007      	b.n	800278c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	f003 0304 	and.w	r3, r3, #4
 8002786:	2b04      	cmp	r3, #4
 8002788:	d1c3      	bne.n	8002712 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027aa:	d11b      	bne.n	80027e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2220      	movs	r2, #32
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d0:	f043 0204 	orr.w	r2, r3, #4
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e26c      	b.n	8002cdc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 8087 	beq.w	800291e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002810:	4b92      	ldr	r3, [pc, #584]	; (8002a5c <HAL_RCC_OscConfig+0x26c>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 030c 	and.w	r3, r3, #12
 8002818:	2b04      	cmp	r3, #4
 800281a:	d00c      	beq.n	8002836 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800281c:	4b8f      	ldr	r3, [pc, #572]	; (8002a5c <HAL_RCC_OscConfig+0x26c>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 030c 	and.w	r3, r3, #12
 8002824:	2b08      	cmp	r3, #8
 8002826:	d112      	bne.n	800284e <HAL_RCC_OscConfig+0x5e>
 8002828:	4b8c      	ldr	r3, [pc, #560]	; (8002a5c <HAL_RCC_OscConfig+0x26c>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002834:	d10b      	bne.n	800284e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002836:	4b89      	ldr	r3, [pc, #548]	; (8002a5c <HAL_RCC_OscConfig+0x26c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d06c      	beq.n	800291c <HAL_RCC_OscConfig+0x12c>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d168      	bne.n	800291c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e246      	b.n	8002cdc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002856:	d106      	bne.n	8002866 <HAL_RCC_OscConfig+0x76>
 8002858:	4b80      	ldr	r3, [pc, #512]	; (8002a5c <HAL_RCC_OscConfig+0x26c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a7f      	ldr	r2, [pc, #508]	; (8002a5c <HAL_RCC_OscConfig+0x26c>)
 800285e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002862:	6013      	str	r3, [r2, #0]
 8002864:	e02e      	b.n	80028c4 <HAL_RCC_OscConfig+0xd4>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10c      	bne.n	8002888 <HAL_RCC_OscConfig+0x98>
 800286e:	4b7b      	ldr	r3, [pc, #492]	; (8002a5c <HAL_RCC_OscConfig+0x26c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a7a      	ldr	r2, [pc, #488]	; (8002a5c <HAL_RCC_OscConfig+0x26c>)
 8002874:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	4b78      	ldr	r3, [pc, #480]	; (8002a5c <HAL_RCC_OscConfig+0x26c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a77      	ldr	r2, [pc, #476]	; (8002a5c <HAL_RCC_OscConfig+0x26c>)
 8002880:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	e01d      	b.n	80028c4 <HAL_RCC_OscConfig+0xd4>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002890:	d10c      	bne.n	80028ac <HAL_RCC_OscConfig+0xbc>
 8002892:	4b72      	ldr	r3, [pc, #456]	; (8002a5c <HAL_RCC_OscConfig+0x26c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a71      	ldr	r2, [pc, #452]	; (8002a5c <HAL_RCC_OscConfig+0x26c>)
 8002898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	4b6f      	ldr	r3, [pc, #444]	; (8002a5c <HAL_RCC_OscConfig+0x26c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a6e      	ldr	r2, [pc, #440]	; (8002a5c <HAL_RCC_OscConfig+0x26c>)
 80028a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	e00b      	b.n	80028c4 <HAL_RCC_OscConfig+0xd4>
 80028ac:	4b6b      	ldr	r3, [pc, #428]	; (8002a5c <HAL_RCC_OscConfig+0x26c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a6a      	ldr	r2, [pc, #424]	; (8002a5c <HAL_RCC_OscConfig+0x26c>)
 80028b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	4b68      	ldr	r3, [pc, #416]	; (8002a5c <HAL_RCC_OscConfig+0x26c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a67      	ldr	r2, [pc, #412]	; (8002a5c <HAL_RCC_OscConfig+0x26c>)
 80028be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d013      	beq.n	80028f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028cc:	f7fe fa9a 	bl	8000e04 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028d4:	f7fe fa96 	bl	8000e04 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b64      	cmp	r3, #100	; 0x64
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e1fa      	b.n	8002cdc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e6:	4b5d      	ldr	r3, [pc, #372]	; (8002a5c <HAL_RCC_OscConfig+0x26c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0f0      	beq.n	80028d4 <HAL_RCC_OscConfig+0xe4>
 80028f2:	e014      	b.n	800291e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7fe fa86 	bl	8000e04 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028fc:	f7fe fa82 	bl	8000e04 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b64      	cmp	r3, #100	; 0x64
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e1e6      	b.n	8002cdc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800290e:	4b53      	ldr	r3, [pc, #332]	; (8002a5c <HAL_RCC_OscConfig+0x26c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0x10c>
 800291a:	e000      	b.n	800291e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d063      	beq.n	80029f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800292a:	4b4c      	ldr	r3, [pc, #304]	; (8002a5c <HAL_RCC_OscConfig+0x26c>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f003 030c 	and.w	r3, r3, #12
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00b      	beq.n	800294e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002936:	4b49      	ldr	r3, [pc, #292]	; (8002a5c <HAL_RCC_OscConfig+0x26c>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f003 030c 	and.w	r3, r3, #12
 800293e:	2b08      	cmp	r3, #8
 8002940:	d11c      	bne.n	800297c <HAL_RCC_OscConfig+0x18c>
 8002942:	4b46      	ldr	r3, [pc, #280]	; (8002a5c <HAL_RCC_OscConfig+0x26c>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d116      	bne.n	800297c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800294e:	4b43      	ldr	r3, [pc, #268]	; (8002a5c <HAL_RCC_OscConfig+0x26c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d005      	beq.n	8002966 <HAL_RCC_OscConfig+0x176>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d001      	beq.n	8002966 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e1ba      	b.n	8002cdc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002966:	4b3d      	ldr	r3, [pc, #244]	; (8002a5c <HAL_RCC_OscConfig+0x26c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	4939      	ldr	r1, [pc, #228]	; (8002a5c <HAL_RCC_OscConfig+0x26c>)
 8002976:	4313      	orrs	r3, r2
 8002978:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800297a:	e03a      	b.n	80029f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d020      	beq.n	80029c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002984:	4b36      	ldr	r3, [pc, #216]	; (8002a60 <HAL_RCC_OscConfig+0x270>)
 8002986:	2201      	movs	r2, #1
 8002988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298a:	f7fe fa3b 	bl	8000e04 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002992:	f7fe fa37 	bl	8000e04 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e19b      	b.n	8002cdc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a4:	4b2d      	ldr	r3, [pc, #180]	; (8002a5c <HAL_RCC_OscConfig+0x26c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0f0      	beq.n	8002992 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b0:	4b2a      	ldr	r3, [pc, #168]	; (8002a5c <HAL_RCC_OscConfig+0x26c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4927      	ldr	r1, [pc, #156]	; (8002a5c <HAL_RCC_OscConfig+0x26c>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	600b      	str	r3, [r1, #0]
 80029c4:	e015      	b.n	80029f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029c6:	4b26      	ldr	r3, [pc, #152]	; (8002a60 <HAL_RCC_OscConfig+0x270>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029cc:	f7fe fa1a 	bl	8000e04 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029d4:	f7fe fa16 	bl	8000e04 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e17a      	b.n	8002cdc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029e6:	4b1d      	ldr	r3, [pc, #116]	; (8002a5c <HAL_RCC_OscConfig+0x26c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f0      	bne.n	80029d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d03a      	beq.n	8002a74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d019      	beq.n	8002a3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a06:	4b17      	ldr	r3, [pc, #92]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a0c:	f7fe f9fa 	bl	8000e04 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a14:	f7fe f9f6 	bl	8000e04 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e15a      	b.n	8002cdc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a26:	4b0d      	ldr	r3, [pc, #52]	; (8002a5c <HAL_RCC_OscConfig+0x26c>)
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a32:	2001      	movs	r0, #1
 8002a34:	f000 fab8 	bl	8002fa8 <RCC_Delay>
 8002a38:	e01c      	b.n	8002a74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a3a:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <HAL_RCC_OscConfig+0x274>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a40:	f7fe f9e0 	bl	8000e04 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a46:	e00f      	b.n	8002a68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a48:	f7fe f9dc 	bl	8000e04 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d908      	bls.n	8002a68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e140      	b.n	8002cdc <HAL_RCC_OscConfig+0x4ec>
 8002a5a:	bf00      	nop
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	42420000 	.word	0x42420000
 8002a64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a68:	4b9e      	ldr	r3, [pc, #632]	; (8002ce4 <HAL_RCC_OscConfig+0x4f4>)
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1e9      	bne.n	8002a48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0304 	and.w	r3, r3, #4
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 80a6 	beq.w	8002bce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a82:	2300      	movs	r3, #0
 8002a84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a86:	4b97      	ldr	r3, [pc, #604]	; (8002ce4 <HAL_RCC_OscConfig+0x4f4>)
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10d      	bne.n	8002aae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a92:	4b94      	ldr	r3, [pc, #592]	; (8002ce4 <HAL_RCC_OscConfig+0x4f4>)
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	4a93      	ldr	r2, [pc, #588]	; (8002ce4 <HAL_RCC_OscConfig+0x4f4>)
 8002a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	61d3      	str	r3, [r2, #28]
 8002a9e:	4b91      	ldr	r3, [pc, #580]	; (8002ce4 <HAL_RCC_OscConfig+0x4f4>)
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa6:	60bb      	str	r3, [r7, #8]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aae:	4b8e      	ldr	r3, [pc, #568]	; (8002ce8 <HAL_RCC_OscConfig+0x4f8>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d118      	bne.n	8002aec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aba:	4b8b      	ldr	r3, [pc, #556]	; (8002ce8 <HAL_RCC_OscConfig+0x4f8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a8a      	ldr	r2, [pc, #552]	; (8002ce8 <HAL_RCC_OscConfig+0x4f8>)
 8002ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ac6:	f7fe f99d 	bl	8000e04 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ace:	f7fe f999 	bl	8000e04 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b64      	cmp	r3, #100	; 0x64
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e0fd      	b.n	8002cdc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae0:	4b81      	ldr	r3, [pc, #516]	; (8002ce8 <HAL_RCC_OscConfig+0x4f8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0f0      	beq.n	8002ace <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d106      	bne.n	8002b02 <HAL_RCC_OscConfig+0x312>
 8002af4:	4b7b      	ldr	r3, [pc, #492]	; (8002ce4 <HAL_RCC_OscConfig+0x4f4>)
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	4a7a      	ldr	r2, [pc, #488]	; (8002ce4 <HAL_RCC_OscConfig+0x4f4>)
 8002afa:	f043 0301 	orr.w	r3, r3, #1
 8002afe:	6213      	str	r3, [r2, #32]
 8002b00:	e02d      	b.n	8002b5e <HAL_RCC_OscConfig+0x36e>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10c      	bne.n	8002b24 <HAL_RCC_OscConfig+0x334>
 8002b0a:	4b76      	ldr	r3, [pc, #472]	; (8002ce4 <HAL_RCC_OscConfig+0x4f4>)
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	4a75      	ldr	r2, [pc, #468]	; (8002ce4 <HAL_RCC_OscConfig+0x4f4>)
 8002b10:	f023 0301 	bic.w	r3, r3, #1
 8002b14:	6213      	str	r3, [r2, #32]
 8002b16:	4b73      	ldr	r3, [pc, #460]	; (8002ce4 <HAL_RCC_OscConfig+0x4f4>)
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	4a72      	ldr	r2, [pc, #456]	; (8002ce4 <HAL_RCC_OscConfig+0x4f4>)
 8002b1c:	f023 0304 	bic.w	r3, r3, #4
 8002b20:	6213      	str	r3, [r2, #32]
 8002b22:	e01c      	b.n	8002b5e <HAL_RCC_OscConfig+0x36e>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	2b05      	cmp	r3, #5
 8002b2a:	d10c      	bne.n	8002b46 <HAL_RCC_OscConfig+0x356>
 8002b2c:	4b6d      	ldr	r3, [pc, #436]	; (8002ce4 <HAL_RCC_OscConfig+0x4f4>)
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	4a6c      	ldr	r2, [pc, #432]	; (8002ce4 <HAL_RCC_OscConfig+0x4f4>)
 8002b32:	f043 0304 	orr.w	r3, r3, #4
 8002b36:	6213      	str	r3, [r2, #32]
 8002b38:	4b6a      	ldr	r3, [pc, #424]	; (8002ce4 <HAL_RCC_OscConfig+0x4f4>)
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	4a69      	ldr	r2, [pc, #420]	; (8002ce4 <HAL_RCC_OscConfig+0x4f4>)
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	6213      	str	r3, [r2, #32]
 8002b44:	e00b      	b.n	8002b5e <HAL_RCC_OscConfig+0x36e>
 8002b46:	4b67      	ldr	r3, [pc, #412]	; (8002ce4 <HAL_RCC_OscConfig+0x4f4>)
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	4a66      	ldr	r2, [pc, #408]	; (8002ce4 <HAL_RCC_OscConfig+0x4f4>)
 8002b4c:	f023 0301 	bic.w	r3, r3, #1
 8002b50:	6213      	str	r3, [r2, #32]
 8002b52:	4b64      	ldr	r3, [pc, #400]	; (8002ce4 <HAL_RCC_OscConfig+0x4f4>)
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	4a63      	ldr	r2, [pc, #396]	; (8002ce4 <HAL_RCC_OscConfig+0x4f4>)
 8002b58:	f023 0304 	bic.w	r3, r3, #4
 8002b5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d015      	beq.n	8002b92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b66:	f7fe f94d 	bl	8000e04 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b6c:	e00a      	b.n	8002b84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b6e:	f7fe f949 	bl	8000e04 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e0ab      	b.n	8002cdc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b84:	4b57      	ldr	r3, [pc, #348]	; (8002ce4 <HAL_RCC_OscConfig+0x4f4>)
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0ee      	beq.n	8002b6e <HAL_RCC_OscConfig+0x37e>
 8002b90:	e014      	b.n	8002bbc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b92:	f7fe f937 	bl	8000e04 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b98:	e00a      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b9a:	f7fe f933 	bl	8000e04 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e095      	b.n	8002cdc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb0:	4b4c      	ldr	r3, [pc, #304]	; (8002ce4 <HAL_RCC_OscConfig+0x4f4>)
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1ee      	bne.n	8002b9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bbc:	7dfb      	ldrb	r3, [r7, #23]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d105      	bne.n	8002bce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc2:	4b48      	ldr	r3, [pc, #288]	; (8002ce4 <HAL_RCC_OscConfig+0x4f4>)
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	4a47      	ldr	r2, [pc, #284]	; (8002ce4 <HAL_RCC_OscConfig+0x4f4>)
 8002bc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bcc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 8081 	beq.w	8002cda <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bd8:	4b42      	ldr	r3, [pc, #264]	; (8002ce4 <HAL_RCC_OscConfig+0x4f4>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 030c 	and.w	r3, r3, #12
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d061      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	69db      	ldr	r3, [r3, #28]
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d146      	bne.n	8002c7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bec:	4b3f      	ldr	r3, [pc, #252]	; (8002cec <HAL_RCC_OscConfig+0x4fc>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf2:	f7fe f907 	bl	8000e04 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bfa:	f7fe f903 	bl	8000e04 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e067      	b.n	8002cdc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c0c:	4b35      	ldr	r3, [pc, #212]	; (8002ce4 <HAL_RCC_OscConfig+0x4f4>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1f0      	bne.n	8002bfa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c20:	d108      	bne.n	8002c34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c22:	4b30      	ldr	r3, [pc, #192]	; (8002ce4 <HAL_RCC_OscConfig+0x4f4>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	492d      	ldr	r1, [pc, #180]	; (8002ce4 <HAL_RCC_OscConfig+0x4f4>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c34:	4b2b      	ldr	r3, [pc, #172]	; (8002ce4 <HAL_RCC_OscConfig+0x4f4>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a19      	ldr	r1, [r3, #32]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	430b      	orrs	r3, r1
 8002c46:	4927      	ldr	r1, [pc, #156]	; (8002ce4 <HAL_RCC_OscConfig+0x4f4>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c4c:	4b27      	ldr	r3, [pc, #156]	; (8002cec <HAL_RCC_OscConfig+0x4fc>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c52:	f7fe f8d7 	bl	8000e04 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c5a:	f7fe f8d3 	bl	8000e04 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e037      	b.n	8002cdc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c6c:	4b1d      	ldr	r3, [pc, #116]	; (8002ce4 <HAL_RCC_OscConfig+0x4f4>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0f0      	beq.n	8002c5a <HAL_RCC_OscConfig+0x46a>
 8002c78:	e02f      	b.n	8002cda <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7a:	4b1c      	ldr	r3, [pc, #112]	; (8002cec <HAL_RCC_OscConfig+0x4fc>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c80:	f7fe f8c0 	bl	8000e04 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c88:	f7fe f8bc 	bl	8000e04 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e020      	b.n	8002cdc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c9a:	4b12      	ldr	r3, [pc, #72]	; (8002ce4 <HAL_RCC_OscConfig+0x4f4>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f0      	bne.n	8002c88 <HAL_RCC_OscConfig+0x498>
 8002ca6:	e018      	b.n	8002cda <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e013      	b.n	8002cdc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <HAL_RCC_OscConfig+0x4f4>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d106      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d001      	beq.n	8002cda <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e000      	b.n	8002cdc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	40007000 	.word	0x40007000
 8002cec:	42420060 	.word	0x42420060

08002cf0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e0d0      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d04:	4b6a      	ldr	r3, [pc, #424]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d910      	bls.n	8002d34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d12:	4b67      	ldr	r3, [pc, #412]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 0207 	bic.w	r2, r3, #7
 8002d1a:	4965      	ldr	r1, [pc, #404]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d22:	4b63      	ldr	r3, [pc, #396]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d001      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0b8      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d020      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d4c:	4b59      	ldr	r3, [pc, #356]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	4a58      	ldr	r2, [pc, #352]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d56:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0308 	and.w	r3, r3, #8
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d005      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d64:	4b53      	ldr	r3, [pc, #332]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	4a52      	ldr	r2, [pc, #328]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d6e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d70:	4b50      	ldr	r3, [pc, #320]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	494d      	ldr	r1, [pc, #308]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d040      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d107      	bne.n	8002da6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d96:	4b47      	ldr	r3, [pc, #284]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d115      	bne.n	8002dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e07f      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d107      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dae:	4b41      	ldr	r3, [pc, #260]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d109      	bne.n	8002dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e073      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dbe:	4b3d      	ldr	r3, [pc, #244]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e06b      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dce:	4b39      	ldr	r3, [pc, #228]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f023 0203 	bic.w	r2, r3, #3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	4936      	ldr	r1, [pc, #216]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002de0:	f7fe f810 	bl	8000e04 <HAL_GetTick>
 8002de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de6:	e00a      	b.n	8002dfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de8:	f7fe f80c 	bl	8000e04 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e053      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfe:	4b2d      	ldr	r3, [pc, #180]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f003 020c 	and.w	r2, r3, #12
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d1eb      	bne.n	8002de8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e10:	4b27      	ldr	r3, [pc, #156]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d210      	bcs.n	8002e40 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1e:	4b24      	ldr	r3, [pc, #144]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f023 0207 	bic.w	r2, r3, #7
 8002e26:	4922      	ldr	r1, [pc, #136]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2e:	4b20      	ldr	r3, [pc, #128]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e032      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d008      	beq.n	8002e5e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e4c:	4b19      	ldr	r3, [pc, #100]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	4916      	ldr	r1, [pc, #88]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d009      	beq.n	8002e7e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e6a:	4b12      	ldr	r3, [pc, #72]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	490e      	ldr	r1, [pc, #56]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e7e:	f000 f821 	bl	8002ec4 <HAL_RCC_GetSysClockFreq>
 8002e82:	4602      	mov	r2, r0
 8002e84:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	091b      	lsrs	r3, r3, #4
 8002e8a:	f003 030f 	and.w	r3, r3, #15
 8002e8e:	490a      	ldr	r1, [pc, #40]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e90:	5ccb      	ldrb	r3, [r1, r3]
 8002e92:	fa22 f303 	lsr.w	r3, r2, r3
 8002e96:	4a09      	ldr	r2, [pc, #36]	; (8002ebc <HAL_RCC_ClockConfig+0x1cc>)
 8002e98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e9a:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <HAL_RCC_ClockConfig+0x1d0>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fd ff6e 	bl	8000d80 <HAL_InitTick>

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40022000 	.word	0x40022000
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	080040d4 	.word	0x080040d4
 8002ebc:	20000000 	.word	0x20000000
 8002ec0:	20000004 	.word	0x20000004

08002ec4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b087      	sub	sp, #28
 8002ec8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60bb      	str	r3, [r7, #8]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ede:	4b1e      	ldr	r3, [pc, #120]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f003 030c 	and.w	r3, r3, #12
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	d002      	beq.n	8002ef4 <HAL_RCC_GetSysClockFreq+0x30>
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d003      	beq.n	8002efa <HAL_RCC_GetSysClockFreq+0x36>
 8002ef2:	e027      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ef4:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x98>)
 8002ef6:	613b      	str	r3, [r7, #16]
      break;
 8002ef8:	e027      	b.n	8002f4a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	0c9b      	lsrs	r3, r3, #18
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	4a17      	ldr	r2, [pc, #92]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f04:	5cd3      	ldrb	r3, [r2, r3]
 8002f06:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d010      	beq.n	8002f34 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f12:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	0c5b      	lsrs	r3, r3, #17
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	4a11      	ldr	r2, [pc, #68]	; (8002f64 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f1e:	5cd3      	ldrb	r3, [r2, r3]
 8002f20:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a0d      	ldr	r2, [pc, #52]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x98>)
 8002f26:	fb02 f203 	mul.w	r2, r2, r3
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f30:	617b      	str	r3, [r7, #20]
 8002f32:	e004      	b.n	8002f3e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a0c      	ldr	r2, [pc, #48]	; (8002f68 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f38:	fb02 f303 	mul.w	r3, r2, r3
 8002f3c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	613b      	str	r3, [r7, #16]
      break;
 8002f42:	e002      	b.n	8002f4a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f44:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x98>)
 8002f46:	613b      	str	r3, [r7, #16]
      break;
 8002f48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f4a:	693b      	ldr	r3, [r7, #16]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	371c      	adds	r7, #28
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	007a1200 	.word	0x007a1200
 8002f60:	080040ec 	.word	0x080040ec
 8002f64:	080040fc 	.word	0x080040fc
 8002f68:	003d0900 	.word	0x003d0900

08002f6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f70:	4b02      	ldr	r3, [pc, #8]	; (8002f7c <HAL_RCC_GetHCLKFreq+0x10>)
 8002f72:	681b      	ldr	r3, [r3, #0]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr
 8002f7c:	20000000 	.word	0x20000000

08002f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f84:	f7ff fff2 	bl	8002f6c <HAL_RCC_GetHCLKFreq>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	4b05      	ldr	r3, [pc, #20]	; (8002fa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	0a1b      	lsrs	r3, r3, #8
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	4903      	ldr	r1, [pc, #12]	; (8002fa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f96:	5ccb      	ldrb	r3, [r1, r3]
 8002f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	080040e4 	.word	0x080040e4

08002fa8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fb0:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <RCC_Delay+0x34>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a0a      	ldr	r2, [pc, #40]	; (8002fe0 <RCC_Delay+0x38>)
 8002fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fba:	0a5b      	lsrs	r3, r3, #9
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	fb02 f303 	mul.w	r3, r2, r3
 8002fc2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fc4:	bf00      	nop
  }
  while (Delay --);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	1e5a      	subs	r2, r3, #1
 8002fca:	60fa      	str	r2, [r7, #12]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1f9      	bne.n	8002fc4 <RCC_Delay+0x1c>
}
 8002fd0:	bf00      	nop
 8002fd2:	bf00      	nop
 8002fd4:	3714      	adds	r7, #20
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr
 8002fdc:	20000000 	.word	0x20000000
 8002fe0:	10624dd3 	.word	0x10624dd3

08002fe4 <__errno>:
 8002fe4:	4b01      	ldr	r3, [pc, #4]	; (8002fec <__errno+0x8>)
 8002fe6:	6818      	ldr	r0, [r3, #0]
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	2000000c 	.word	0x2000000c

08002ff0 <__libc_init_array>:
 8002ff0:	b570      	push	{r4, r5, r6, lr}
 8002ff2:	2600      	movs	r6, #0
 8002ff4:	4d0c      	ldr	r5, [pc, #48]	; (8003028 <__libc_init_array+0x38>)
 8002ff6:	4c0d      	ldr	r4, [pc, #52]	; (800302c <__libc_init_array+0x3c>)
 8002ff8:	1b64      	subs	r4, r4, r5
 8002ffa:	10a4      	asrs	r4, r4, #2
 8002ffc:	42a6      	cmp	r6, r4
 8002ffe:	d109      	bne.n	8003014 <__libc_init_array+0x24>
 8003000:	f000 fc5c 	bl	80038bc <_init>
 8003004:	2600      	movs	r6, #0
 8003006:	4d0a      	ldr	r5, [pc, #40]	; (8003030 <__libc_init_array+0x40>)
 8003008:	4c0a      	ldr	r4, [pc, #40]	; (8003034 <__libc_init_array+0x44>)
 800300a:	1b64      	subs	r4, r4, r5
 800300c:	10a4      	asrs	r4, r4, #2
 800300e:	42a6      	cmp	r6, r4
 8003010:	d105      	bne.n	800301e <__libc_init_array+0x2e>
 8003012:	bd70      	pop	{r4, r5, r6, pc}
 8003014:	f855 3b04 	ldr.w	r3, [r5], #4
 8003018:	4798      	blx	r3
 800301a:	3601      	adds	r6, #1
 800301c:	e7ee      	b.n	8002ffc <__libc_init_array+0xc>
 800301e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003022:	4798      	blx	r3
 8003024:	3601      	adds	r6, #1
 8003026:	e7f2      	b.n	800300e <__libc_init_array+0x1e>
 8003028:	08004134 	.word	0x08004134
 800302c:	08004134 	.word	0x08004134
 8003030:	08004134 	.word	0x08004134
 8003034:	08004138 	.word	0x08004138

08003038 <memcpy>:
 8003038:	440a      	add	r2, r1
 800303a:	4291      	cmp	r1, r2
 800303c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003040:	d100      	bne.n	8003044 <memcpy+0xc>
 8003042:	4770      	bx	lr
 8003044:	b510      	push	{r4, lr}
 8003046:	f811 4b01 	ldrb.w	r4, [r1], #1
 800304a:	4291      	cmp	r1, r2
 800304c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003050:	d1f9      	bne.n	8003046 <memcpy+0xe>
 8003052:	bd10      	pop	{r4, pc}

08003054 <memmove>:
 8003054:	4288      	cmp	r0, r1
 8003056:	b510      	push	{r4, lr}
 8003058:	eb01 0402 	add.w	r4, r1, r2
 800305c:	d902      	bls.n	8003064 <memmove+0x10>
 800305e:	4284      	cmp	r4, r0
 8003060:	4623      	mov	r3, r4
 8003062:	d807      	bhi.n	8003074 <memmove+0x20>
 8003064:	1e43      	subs	r3, r0, #1
 8003066:	42a1      	cmp	r1, r4
 8003068:	d008      	beq.n	800307c <memmove+0x28>
 800306a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800306e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003072:	e7f8      	b.n	8003066 <memmove+0x12>
 8003074:	4601      	mov	r1, r0
 8003076:	4402      	add	r2, r0
 8003078:	428a      	cmp	r2, r1
 800307a:	d100      	bne.n	800307e <memmove+0x2a>
 800307c:	bd10      	pop	{r4, pc}
 800307e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003082:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003086:	e7f7      	b.n	8003078 <memmove+0x24>

08003088 <memset>:
 8003088:	4603      	mov	r3, r0
 800308a:	4402      	add	r2, r0
 800308c:	4293      	cmp	r3, r2
 800308e:	d100      	bne.n	8003092 <memset+0xa>
 8003090:	4770      	bx	lr
 8003092:	f803 1b01 	strb.w	r1, [r3], #1
 8003096:	e7f9      	b.n	800308c <memset+0x4>

08003098 <siprintf>:
 8003098:	b40e      	push	{r1, r2, r3}
 800309a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800309e:	b500      	push	{lr}
 80030a0:	b09c      	sub	sp, #112	; 0x70
 80030a2:	ab1d      	add	r3, sp, #116	; 0x74
 80030a4:	9002      	str	r0, [sp, #8]
 80030a6:	9006      	str	r0, [sp, #24]
 80030a8:	9107      	str	r1, [sp, #28]
 80030aa:	9104      	str	r1, [sp, #16]
 80030ac:	4808      	ldr	r0, [pc, #32]	; (80030d0 <siprintf+0x38>)
 80030ae:	4909      	ldr	r1, [pc, #36]	; (80030d4 <siprintf+0x3c>)
 80030b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80030b4:	9105      	str	r1, [sp, #20]
 80030b6:	6800      	ldr	r0, [r0, #0]
 80030b8:	a902      	add	r1, sp, #8
 80030ba:	9301      	str	r3, [sp, #4]
 80030bc:	f000 f868 	bl	8003190 <_svfiprintf_r>
 80030c0:	2200      	movs	r2, #0
 80030c2:	9b02      	ldr	r3, [sp, #8]
 80030c4:	701a      	strb	r2, [r3, #0]
 80030c6:	b01c      	add	sp, #112	; 0x70
 80030c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80030cc:	b003      	add	sp, #12
 80030ce:	4770      	bx	lr
 80030d0:	2000000c 	.word	0x2000000c
 80030d4:	ffff0208 	.word	0xffff0208

080030d8 <__ssputs_r>:
 80030d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030dc:	688e      	ldr	r6, [r1, #8]
 80030de:	4682      	mov	sl, r0
 80030e0:	429e      	cmp	r6, r3
 80030e2:	460c      	mov	r4, r1
 80030e4:	4690      	mov	r8, r2
 80030e6:	461f      	mov	r7, r3
 80030e8:	d838      	bhi.n	800315c <__ssputs_r+0x84>
 80030ea:	898a      	ldrh	r2, [r1, #12]
 80030ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80030f0:	d032      	beq.n	8003158 <__ssputs_r+0x80>
 80030f2:	6825      	ldr	r5, [r4, #0]
 80030f4:	6909      	ldr	r1, [r1, #16]
 80030f6:	3301      	adds	r3, #1
 80030f8:	eba5 0901 	sub.w	r9, r5, r1
 80030fc:	6965      	ldr	r5, [r4, #20]
 80030fe:	444b      	add	r3, r9
 8003100:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003104:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003108:	106d      	asrs	r5, r5, #1
 800310a:	429d      	cmp	r5, r3
 800310c:	bf38      	it	cc
 800310e:	461d      	movcc	r5, r3
 8003110:	0553      	lsls	r3, r2, #21
 8003112:	d531      	bpl.n	8003178 <__ssputs_r+0xa0>
 8003114:	4629      	mov	r1, r5
 8003116:	f000 fb2b 	bl	8003770 <_malloc_r>
 800311a:	4606      	mov	r6, r0
 800311c:	b950      	cbnz	r0, 8003134 <__ssputs_r+0x5c>
 800311e:	230c      	movs	r3, #12
 8003120:	f04f 30ff 	mov.w	r0, #4294967295
 8003124:	f8ca 3000 	str.w	r3, [sl]
 8003128:	89a3      	ldrh	r3, [r4, #12]
 800312a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800312e:	81a3      	strh	r3, [r4, #12]
 8003130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003134:	464a      	mov	r2, r9
 8003136:	6921      	ldr	r1, [r4, #16]
 8003138:	f7ff ff7e 	bl	8003038 <memcpy>
 800313c:	89a3      	ldrh	r3, [r4, #12]
 800313e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003146:	81a3      	strh	r3, [r4, #12]
 8003148:	6126      	str	r6, [r4, #16]
 800314a:	444e      	add	r6, r9
 800314c:	6026      	str	r6, [r4, #0]
 800314e:	463e      	mov	r6, r7
 8003150:	6165      	str	r5, [r4, #20]
 8003152:	eba5 0509 	sub.w	r5, r5, r9
 8003156:	60a5      	str	r5, [r4, #8]
 8003158:	42be      	cmp	r6, r7
 800315a:	d900      	bls.n	800315e <__ssputs_r+0x86>
 800315c:	463e      	mov	r6, r7
 800315e:	4632      	mov	r2, r6
 8003160:	4641      	mov	r1, r8
 8003162:	6820      	ldr	r0, [r4, #0]
 8003164:	f7ff ff76 	bl	8003054 <memmove>
 8003168:	68a3      	ldr	r3, [r4, #8]
 800316a:	6822      	ldr	r2, [r4, #0]
 800316c:	1b9b      	subs	r3, r3, r6
 800316e:	4432      	add	r2, r6
 8003170:	2000      	movs	r0, #0
 8003172:	60a3      	str	r3, [r4, #8]
 8003174:	6022      	str	r2, [r4, #0]
 8003176:	e7db      	b.n	8003130 <__ssputs_r+0x58>
 8003178:	462a      	mov	r2, r5
 800317a:	f000 fb53 	bl	8003824 <_realloc_r>
 800317e:	4606      	mov	r6, r0
 8003180:	2800      	cmp	r0, #0
 8003182:	d1e1      	bne.n	8003148 <__ssputs_r+0x70>
 8003184:	4650      	mov	r0, sl
 8003186:	6921      	ldr	r1, [r4, #16]
 8003188:	f000 faa6 	bl	80036d8 <_free_r>
 800318c:	e7c7      	b.n	800311e <__ssputs_r+0x46>
	...

08003190 <_svfiprintf_r>:
 8003190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003194:	4698      	mov	r8, r3
 8003196:	898b      	ldrh	r3, [r1, #12]
 8003198:	4607      	mov	r7, r0
 800319a:	061b      	lsls	r3, r3, #24
 800319c:	460d      	mov	r5, r1
 800319e:	4614      	mov	r4, r2
 80031a0:	b09d      	sub	sp, #116	; 0x74
 80031a2:	d50e      	bpl.n	80031c2 <_svfiprintf_r+0x32>
 80031a4:	690b      	ldr	r3, [r1, #16]
 80031a6:	b963      	cbnz	r3, 80031c2 <_svfiprintf_r+0x32>
 80031a8:	2140      	movs	r1, #64	; 0x40
 80031aa:	f000 fae1 	bl	8003770 <_malloc_r>
 80031ae:	6028      	str	r0, [r5, #0]
 80031b0:	6128      	str	r0, [r5, #16]
 80031b2:	b920      	cbnz	r0, 80031be <_svfiprintf_r+0x2e>
 80031b4:	230c      	movs	r3, #12
 80031b6:	603b      	str	r3, [r7, #0]
 80031b8:	f04f 30ff 	mov.w	r0, #4294967295
 80031bc:	e0d1      	b.n	8003362 <_svfiprintf_r+0x1d2>
 80031be:	2340      	movs	r3, #64	; 0x40
 80031c0:	616b      	str	r3, [r5, #20]
 80031c2:	2300      	movs	r3, #0
 80031c4:	9309      	str	r3, [sp, #36]	; 0x24
 80031c6:	2320      	movs	r3, #32
 80031c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80031cc:	2330      	movs	r3, #48	; 0x30
 80031ce:	f04f 0901 	mov.w	r9, #1
 80031d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80031d6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800337c <_svfiprintf_r+0x1ec>
 80031da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80031de:	4623      	mov	r3, r4
 80031e0:	469a      	mov	sl, r3
 80031e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031e6:	b10a      	cbz	r2, 80031ec <_svfiprintf_r+0x5c>
 80031e8:	2a25      	cmp	r2, #37	; 0x25
 80031ea:	d1f9      	bne.n	80031e0 <_svfiprintf_r+0x50>
 80031ec:	ebba 0b04 	subs.w	fp, sl, r4
 80031f0:	d00b      	beq.n	800320a <_svfiprintf_r+0x7a>
 80031f2:	465b      	mov	r3, fp
 80031f4:	4622      	mov	r2, r4
 80031f6:	4629      	mov	r1, r5
 80031f8:	4638      	mov	r0, r7
 80031fa:	f7ff ff6d 	bl	80030d8 <__ssputs_r>
 80031fe:	3001      	adds	r0, #1
 8003200:	f000 80aa 	beq.w	8003358 <_svfiprintf_r+0x1c8>
 8003204:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003206:	445a      	add	r2, fp
 8003208:	9209      	str	r2, [sp, #36]	; 0x24
 800320a:	f89a 3000 	ldrb.w	r3, [sl]
 800320e:	2b00      	cmp	r3, #0
 8003210:	f000 80a2 	beq.w	8003358 <_svfiprintf_r+0x1c8>
 8003214:	2300      	movs	r3, #0
 8003216:	f04f 32ff 	mov.w	r2, #4294967295
 800321a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800321e:	f10a 0a01 	add.w	sl, sl, #1
 8003222:	9304      	str	r3, [sp, #16]
 8003224:	9307      	str	r3, [sp, #28]
 8003226:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800322a:	931a      	str	r3, [sp, #104]	; 0x68
 800322c:	4654      	mov	r4, sl
 800322e:	2205      	movs	r2, #5
 8003230:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003234:	4851      	ldr	r0, [pc, #324]	; (800337c <_svfiprintf_r+0x1ec>)
 8003236:	f000 fa41 	bl	80036bc <memchr>
 800323a:	9a04      	ldr	r2, [sp, #16]
 800323c:	b9d8      	cbnz	r0, 8003276 <_svfiprintf_r+0xe6>
 800323e:	06d0      	lsls	r0, r2, #27
 8003240:	bf44      	itt	mi
 8003242:	2320      	movmi	r3, #32
 8003244:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003248:	0711      	lsls	r1, r2, #28
 800324a:	bf44      	itt	mi
 800324c:	232b      	movmi	r3, #43	; 0x2b
 800324e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003252:	f89a 3000 	ldrb.w	r3, [sl]
 8003256:	2b2a      	cmp	r3, #42	; 0x2a
 8003258:	d015      	beq.n	8003286 <_svfiprintf_r+0xf6>
 800325a:	4654      	mov	r4, sl
 800325c:	2000      	movs	r0, #0
 800325e:	f04f 0c0a 	mov.w	ip, #10
 8003262:	9a07      	ldr	r2, [sp, #28]
 8003264:	4621      	mov	r1, r4
 8003266:	f811 3b01 	ldrb.w	r3, [r1], #1
 800326a:	3b30      	subs	r3, #48	; 0x30
 800326c:	2b09      	cmp	r3, #9
 800326e:	d94e      	bls.n	800330e <_svfiprintf_r+0x17e>
 8003270:	b1b0      	cbz	r0, 80032a0 <_svfiprintf_r+0x110>
 8003272:	9207      	str	r2, [sp, #28]
 8003274:	e014      	b.n	80032a0 <_svfiprintf_r+0x110>
 8003276:	eba0 0308 	sub.w	r3, r0, r8
 800327a:	fa09 f303 	lsl.w	r3, r9, r3
 800327e:	4313      	orrs	r3, r2
 8003280:	46a2      	mov	sl, r4
 8003282:	9304      	str	r3, [sp, #16]
 8003284:	e7d2      	b.n	800322c <_svfiprintf_r+0x9c>
 8003286:	9b03      	ldr	r3, [sp, #12]
 8003288:	1d19      	adds	r1, r3, #4
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	9103      	str	r1, [sp, #12]
 800328e:	2b00      	cmp	r3, #0
 8003290:	bfbb      	ittet	lt
 8003292:	425b      	neglt	r3, r3
 8003294:	f042 0202 	orrlt.w	r2, r2, #2
 8003298:	9307      	strge	r3, [sp, #28]
 800329a:	9307      	strlt	r3, [sp, #28]
 800329c:	bfb8      	it	lt
 800329e:	9204      	strlt	r2, [sp, #16]
 80032a0:	7823      	ldrb	r3, [r4, #0]
 80032a2:	2b2e      	cmp	r3, #46	; 0x2e
 80032a4:	d10c      	bne.n	80032c0 <_svfiprintf_r+0x130>
 80032a6:	7863      	ldrb	r3, [r4, #1]
 80032a8:	2b2a      	cmp	r3, #42	; 0x2a
 80032aa:	d135      	bne.n	8003318 <_svfiprintf_r+0x188>
 80032ac:	9b03      	ldr	r3, [sp, #12]
 80032ae:	3402      	adds	r4, #2
 80032b0:	1d1a      	adds	r2, r3, #4
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	9203      	str	r2, [sp, #12]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	bfb8      	it	lt
 80032ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80032be:	9305      	str	r3, [sp, #20]
 80032c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800338c <_svfiprintf_r+0x1fc>
 80032c4:	2203      	movs	r2, #3
 80032c6:	4650      	mov	r0, sl
 80032c8:	7821      	ldrb	r1, [r4, #0]
 80032ca:	f000 f9f7 	bl	80036bc <memchr>
 80032ce:	b140      	cbz	r0, 80032e2 <_svfiprintf_r+0x152>
 80032d0:	2340      	movs	r3, #64	; 0x40
 80032d2:	eba0 000a 	sub.w	r0, r0, sl
 80032d6:	fa03 f000 	lsl.w	r0, r3, r0
 80032da:	9b04      	ldr	r3, [sp, #16]
 80032dc:	3401      	adds	r4, #1
 80032de:	4303      	orrs	r3, r0
 80032e0:	9304      	str	r3, [sp, #16]
 80032e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032e6:	2206      	movs	r2, #6
 80032e8:	4825      	ldr	r0, [pc, #148]	; (8003380 <_svfiprintf_r+0x1f0>)
 80032ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80032ee:	f000 f9e5 	bl	80036bc <memchr>
 80032f2:	2800      	cmp	r0, #0
 80032f4:	d038      	beq.n	8003368 <_svfiprintf_r+0x1d8>
 80032f6:	4b23      	ldr	r3, [pc, #140]	; (8003384 <_svfiprintf_r+0x1f4>)
 80032f8:	bb1b      	cbnz	r3, 8003342 <_svfiprintf_r+0x1b2>
 80032fa:	9b03      	ldr	r3, [sp, #12]
 80032fc:	3307      	adds	r3, #7
 80032fe:	f023 0307 	bic.w	r3, r3, #7
 8003302:	3308      	adds	r3, #8
 8003304:	9303      	str	r3, [sp, #12]
 8003306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003308:	4433      	add	r3, r6
 800330a:	9309      	str	r3, [sp, #36]	; 0x24
 800330c:	e767      	b.n	80031de <_svfiprintf_r+0x4e>
 800330e:	460c      	mov	r4, r1
 8003310:	2001      	movs	r0, #1
 8003312:	fb0c 3202 	mla	r2, ip, r2, r3
 8003316:	e7a5      	b.n	8003264 <_svfiprintf_r+0xd4>
 8003318:	2300      	movs	r3, #0
 800331a:	f04f 0c0a 	mov.w	ip, #10
 800331e:	4619      	mov	r1, r3
 8003320:	3401      	adds	r4, #1
 8003322:	9305      	str	r3, [sp, #20]
 8003324:	4620      	mov	r0, r4
 8003326:	f810 2b01 	ldrb.w	r2, [r0], #1
 800332a:	3a30      	subs	r2, #48	; 0x30
 800332c:	2a09      	cmp	r2, #9
 800332e:	d903      	bls.n	8003338 <_svfiprintf_r+0x1a8>
 8003330:	2b00      	cmp	r3, #0
 8003332:	d0c5      	beq.n	80032c0 <_svfiprintf_r+0x130>
 8003334:	9105      	str	r1, [sp, #20]
 8003336:	e7c3      	b.n	80032c0 <_svfiprintf_r+0x130>
 8003338:	4604      	mov	r4, r0
 800333a:	2301      	movs	r3, #1
 800333c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003340:	e7f0      	b.n	8003324 <_svfiprintf_r+0x194>
 8003342:	ab03      	add	r3, sp, #12
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	462a      	mov	r2, r5
 8003348:	4638      	mov	r0, r7
 800334a:	4b0f      	ldr	r3, [pc, #60]	; (8003388 <_svfiprintf_r+0x1f8>)
 800334c:	a904      	add	r1, sp, #16
 800334e:	f3af 8000 	nop.w
 8003352:	1c42      	adds	r2, r0, #1
 8003354:	4606      	mov	r6, r0
 8003356:	d1d6      	bne.n	8003306 <_svfiprintf_r+0x176>
 8003358:	89ab      	ldrh	r3, [r5, #12]
 800335a:	065b      	lsls	r3, r3, #25
 800335c:	f53f af2c 	bmi.w	80031b8 <_svfiprintf_r+0x28>
 8003360:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003362:	b01d      	add	sp, #116	; 0x74
 8003364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003368:	ab03      	add	r3, sp, #12
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	462a      	mov	r2, r5
 800336e:	4638      	mov	r0, r7
 8003370:	4b05      	ldr	r3, [pc, #20]	; (8003388 <_svfiprintf_r+0x1f8>)
 8003372:	a904      	add	r1, sp, #16
 8003374:	f000 f87c 	bl	8003470 <_printf_i>
 8003378:	e7eb      	b.n	8003352 <_svfiprintf_r+0x1c2>
 800337a:	bf00      	nop
 800337c:	080040fe 	.word	0x080040fe
 8003380:	08004108 	.word	0x08004108
 8003384:	00000000 	.word	0x00000000
 8003388:	080030d9 	.word	0x080030d9
 800338c:	08004104 	.word	0x08004104

08003390 <_printf_common>:
 8003390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003394:	4616      	mov	r6, r2
 8003396:	4699      	mov	r9, r3
 8003398:	688a      	ldr	r2, [r1, #8]
 800339a:	690b      	ldr	r3, [r1, #16]
 800339c:	4607      	mov	r7, r0
 800339e:	4293      	cmp	r3, r2
 80033a0:	bfb8      	it	lt
 80033a2:	4613      	movlt	r3, r2
 80033a4:	6033      	str	r3, [r6, #0]
 80033a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80033aa:	460c      	mov	r4, r1
 80033ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80033b0:	b10a      	cbz	r2, 80033b6 <_printf_common+0x26>
 80033b2:	3301      	adds	r3, #1
 80033b4:	6033      	str	r3, [r6, #0]
 80033b6:	6823      	ldr	r3, [r4, #0]
 80033b8:	0699      	lsls	r1, r3, #26
 80033ba:	bf42      	ittt	mi
 80033bc:	6833      	ldrmi	r3, [r6, #0]
 80033be:	3302      	addmi	r3, #2
 80033c0:	6033      	strmi	r3, [r6, #0]
 80033c2:	6825      	ldr	r5, [r4, #0]
 80033c4:	f015 0506 	ands.w	r5, r5, #6
 80033c8:	d106      	bne.n	80033d8 <_printf_common+0x48>
 80033ca:	f104 0a19 	add.w	sl, r4, #25
 80033ce:	68e3      	ldr	r3, [r4, #12]
 80033d0:	6832      	ldr	r2, [r6, #0]
 80033d2:	1a9b      	subs	r3, r3, r2
 80033d4:	42ab      	cmp	r3, r5
 80033d6:	dc28      	bgt.n	800342a <_printf_common+0x9a>
 80033d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80033dc:	1e13      	subs	r3, r2, #0
 80033de:	6822      	ldr	r2, [r4, #0]
 80033e0:	bf18      	it	ne
 80033e2:	2301      	movne	r3, #1
 80033e4:	0692      	lsls	r2, r2, #26
 80033e6:	d42d      	bmi.n	8003444 <_printf_common+0xb4>
 80033e8:	4649      	mov	r1, r9
 80033ea:	4638      	mov	r0, r7
 80033ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033f0:	47c0      	blx	r8
 80033f2:	3001      	adds	r0, #1
 80033f4:	d020      	beq.n	8003438 <_printf_common+0xa8>
 80033f6:	6823      	ldr	r3, [r4, #0]
 80033f8:	68e5      	ldr	r5, [r4, #12]
 80033fa:	f003 0306 	and.w	r3, r3, #6
 80033fe:	2b04      	cmp	r3, #4
 8003400:	bf18      	it	ne
 8003402:	2500      	movne	r5, #0
 8003404:	6832      	ldr	r2, [r6, #0]
 8003406:	f04f 0600 	mov.w	r6, #0
 800340a:	68a3      	ldr	r3, [r4, #8]
 800340c:	bf08      	it	eq
 800340e:	1aad      	subeq	r5, r5, r2
 8003410:	6922      	ldr	r2, [r4, #16]
 8003412:	bf08      	it	eq
 8003414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003418:	4293      	cmp	r3, r2
 800341a:	bfc4      	itt	gt
 800341c:	1a9b      	subgt	r3, r3, r2
 800341e:	18ed      	addgt	r5, r5, r3
 8003420:	341a      	adds	r4, #26
 8003422:	42b5      	cmp	r5, r6
 8003424:	d11a      	bne.n	800345c <_printf_common+0xcc>
 8003426:	2000      	movs	r0, #0
 8003428:	e008      	b.n	800343c <_printf_common+0xac>
 800342a:	2301      	movs	r3, #1
 800342c:	4652      	mov	r2, sl
 800342e:	4649      	mov	r1, r9
 8003430:	4638      	mov	r0, r7
 8003432:	47c0      	blx	r8
 8003434:	3001      	adds	r0, #1
 8003436:	d103      	bne.n	8003440 <_printf_common+0xb0>
 8003438:	f04f 30ff 	mov.w	r0, #4294967295
 800343c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003440:	3501      	adds	r5, #1
 8003442:	e7c4      	b.n	80033ce <_printf_common+0x3e>
 8003444:	2030      	movs	r0, #48	; 0x30
 8003446:	18e1      	adds	r1, r4, r3
 8003448:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003452:	4422      	add	r2, r4
 8003454:	3302      	adds	r3, #2
 8003456:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800345a:	e7c5      	b.n	80033e8 <_printf_common+0x58>
 800345c:	2301      	movs	r3, #1
 800345e:	4622      	mov	r2, r4
 8003460:	4649      	mov	r1, r9
 8003462:	4638      	mov	r0, r7
 8003464:	47c0      	blx	r8
 8003466:	3001      	adds	r0, #1
 8003468:	d0e6      	beq.n	8003438 <_printf_common+0xa8>
 800346a:	3601      	adds	r6, #1
 800346c:	e7d9      	b.n	8003422 <_printf_common+0x92>
	...

08003470 <_printf_i>:
 8003470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003474:	460c      	mov	r4, r1
 8003476:	7e27      	ldrb	r7, [r4, #24]
 8003478:	4691      	mov	r9, r2
 800347a:	2f78      	cmp	r7, #120	; 0x78
 800347c:	4680      	mov	r8, r0
 800347e:	469a      	mov	sl, r3
 8003480:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003482:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003486:	d807      	bhi.n	8003498 <_printf_i+0x28>
 8003488:	2f62      	cmp	r7, #98	; 0x62
 800348a:	d80a      	bhi.n	80034a2 <_printf_i+0x32>
 800348c:	2f00      	cmp	r7, #0
 800348e:	f000 80d9 	beq.w	8003644 <_printf_i+0x1d4>
 8003492:	2f58      	cmp	r7, #88	; 0x58
 8003494:	f000 80a4 	beq.w	80035e0 <_printf_i+0x170>
 8003498:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800349c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80034a0:	e03a      	b.n	8003518 <_printf_i+0xa8>
 80034a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80034a6:	2b15      	cmp	r3, #21
 80034a8:	d8f6      	bhi.n	8003498 <_printf_i+0x28>
 80034aa:	a001      	add	r0, pc, #4	; (adr r0, 80034b0 <_printf_i+0x40>)
 80034ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80034b0:	08003509 	.word	0x08003509
 80034b4:	0800351d 	.word	0x0800351d
 80034b8:	08003499 	.word	0x08003499
 80034bc:	08003499 	.word	0x08003499
 80034c0:	08003499 	.word	0x08003499
 80034c4:	08003499 	.word	0x08003499
 80034c8:	0800351d 	.word	0x0800351d
 80034cc:	08003499 	.word	0x08003499
 80034d0:	08003499 	.word	0x08003499
 80034d4:	08003499 	.word	0x08003499
 80034d8:	08003499 	.word	0x08003499
 80034dc:	0800362b 	.word	0x0800362b
 80034e0:	0800354d 	.word	0x0800354d
 80034e4:	0800360d 	.word	0x0800360d
 80034e8:	08003499 	.word	0x08003499
 80034ec:	08003499 	.word	0x08003499
 80034f0:	0800364d 	.word	0x0800364d
 80034f4:	08003499 	.word	0x08003499
 80034f8:	0800354d 	.word	0x0800354d
 80034fc:	08003499 	.word	0x08003499
 8003500:	08003499 	.word	0x08003499
 8003504:	08003615 	.word	0x08003615
 8003508:	680b      	ldr	r3, [r1, #0]
 800350a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800350e:	1d1a      	adds	r2, r3, #4
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	600a      	str	r2, [r1, #0]
 8003514:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003518:	2301      	movs	r3, #1
 800351a:	e0a4      	b.n	8003666 <_printf_i+0x1f6>
 800351c:	6825      	ldr	r5, [r4, #0]
 800351e:	6808      	ldr	r0, [r1, #0]
 8003520:	062e      	lsls	r6, r5, #24
 8003522:	f100 0304 	add.w	r3, r0, #4
 8003526:	d50a      	bpl.n	800353e <_printf_i+0xce>
 8003528:	6805      	ldr	r5, [r0, #0]
 800352a:	600b      	str	r3, [r1, #0]
 800352c:	2d00      	cmp	r5, #0
 800352e:	da03      	bge.n	8003538 <_printf_i+0xc8>
 8003530:	232d      	movs	r3, #45	; 0x2d
 8003532:	426d      	negs	r5, r5
 8003534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003538:	230a      	movs	r3, #10
 800353a:	485e      	ldr	r0, [pc, #376]	; (80036b4 <_printf_i+0x244>)
 800353c:	e019      	b.n	8003572 <_printf_i+0x102>
 800353e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003542:	6805      	ldr	r5, [r0, #0]
 8003544:	600b      	str	r3, [r1, #0]
 8003546:	bf18      	it	ne
 8003548:	b22d      	sxthne	r5, r5
 800354a:	e7ef      	b.n	800352c <_printf_i+0xbc>
 800354c:	680b      	ldr	r3, [r1, #0]
 800354e:	6825      	ldr	r5, [r4, #0]
 8003550:	1d18      	adds	r0, r3, #4
 8003552:	6008      	str	r0, [r1, #0]
 8003554:	0628      	lsls	r0, r5, #24
 8003556:	d501      	bpl.n	800355c <_printf_i+0xec>
 8003558:	681d      	ldr	r5, [r3, #0]
 800355a:	e002      	b.n	8003562 <_printf_i+0xf2>
 800355c:	0669      	lsls	r1, r5, #25
 800355e:	d5fb      	bpl.n	8003558 <_printf_i+0xe8>
 8003560:	881d      	ldrh	r5, [r3, #0]
 8003562:	2f6f      	cmp	r7, #111	; 0x6f
 8003564:	bf0c      	ite	eq
 8003566:	2308      	moveq	r3, #8
 8003568:	230a      	movne	r3, #10
 800356a:	4852      	ldr	r0, [pc, #328]	; (80036b4 <_printf_i+0x244>)
 800356c:	2100      	movs	r1, #0
 800356e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003572:	6866      	ldr	r6, [r4, #4]
 8003574:	2e00      	cmp	r6, #0
 8003576:	bfa8      	it	ge
 8003578:	6821      	ldrge	r1, [r4, #0]
 800357a:	60a6      	str	r6, [r4, #8]
 800357c:	bfa4      	itt	ge
 800357e:	f021 0104 	bicge.w	r1, r1, #4
 8003582:	6021      	strge	r1, [r4, #0]
 8003584:	b90d      	cbnz	r5, 800358a <_printf_i+0x11a>
 8003586:	2e00      	cmp	r6, #0
 8003588:	d04d      	beq.n	8003626 <_printf_i+0x1b6>
 800358a:	4616      	mov	r6, r2
 800358c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003590:	fb03 5711 	mls	r7, r3, r1, r5
 8003594:	5dc7      	ldrb	r7, [r0, r7]
 8003596:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800359a:	462f      	mov	r7, r5
 800359c:	42bb      	cmp	r3, r7
 800359e:	460d      	mov	r5, r1
 80035a0:	d9f4      	bls.n	800358c <_printf_i+0x11c>
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d10b      	bne.n	80035be <_printf_i+0x14e>
 80035a6:	6823      	ldr	r3, [r4, #0]
 80035a8:	07df      	lsls	r7, r3, #31
 80035aa:	d508      	bpl.n	80035be <_printf_i+0x14e>
 80035ac:	6923      	ldr	r3, [r4, #16]
 80035ae:	6861      	ldr	r1, [r4, #4]
 80035b0:	4299      	cmp	r1, r3
 80035b2:	bfde      	ittt	le
 80035b4:	2330      	movle	r3, #48	; 0x30
 80035b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80035ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 80035be:	1b92      	subs	r2, r2, r6
 80035c0:	6122      	str	r2, [r4, #16]
 80035c2:	464b      	mov	r3, r9
 80035c4:	4621      	mov	r1, r4
 80035c6:	4640      	mov	r0, r8
 80035c8:	f8cd a000 	str.w	sl, [sp]
 80035cc:	aa03      	add	r2, sp, #12
 80035ce:	f7ff fedf 	bl	8003390 <_printf_common>
 80035d2:	3001      	adds	r0, #1
 80035d4:	d14c      	bne.n	8003670 <_printf_i+0x200>
 80035d6:	f04f 30ff 	mov.w	r0, #4294967295
 80035da:	b004      	add	sp, #16
 80035dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035e0:	4834      	ldr	r0, [pc, #208]	; (80036b4 <_printf_i+0x244>)
 80035e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80035e6:	680e      	ldr	r6, [r1, #0]
 80035e8:	6823      	ldr	r3, [r4, #0]
 80035ea:	f856 5b04 	ldr.w	r5, [r6], #4
 80035ee:	061f      	lsls	r7, r3, #24
 80035f0:	600e      	str	r6, [r1, #0]
 80035f2:	d514      	bpl.n	800361e <_printf_i+0x1ae>
 80035f4:	07d9      	lsls	r1, r3, #31
 80035f6:	bf44      	itt	mi
 80035f8:	f043 0320 	orrmi.w	r3, r3, #32
 80035fc:	6023      	strmi	r3, [r4, #0]
 80035fe:	b91d      	cbnz	r5, 8003608 <_printf_i+0x198>
 8003600:	6823      	ldr	r3, [r4, #0]
 8003602:	f023 0320 	bic.w	r3, r3, #32
 8003606:	6023      	str	r3, [r4, #0]
 8003608:	2310      	movs	r3, #16
 800360a:	e7af      	b.n	800356c <_printf_i+0xfc>
 800360c:	6823      	ldr	r3, [r4, #0]
 800360e:	f043 0320 	orr.w	r3, r3, #32
 8003612:	6023      	str	r3, [r4, #0]
 8003614:	2378      	movs	r3, #120	; 0x78
 8003616:	4828      	ldr	r0, [pc, #160]	; (80036b8 <_printf_i+0x248>)
 8003618:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800361c:	e7e3      	b.n	80035e6 <_printf_i+0x176>
 800361e:	065e      	lsls	r6, r3, #25
 8003620:	bf48      	it	mi
 8003622:	b2ad      	uxthmi	r5, r5
 8003624:	e7e6      	b.n	80035f4 <_printf_i+0x184>
 8003626:	4616      	mov	r6, r2
 8003628:	e7bb      	b.n	80035a2 <_printf_i+0x132>
 800362a:	680b      	ldr	r3, [r1, #0]
 800362c:	6826      	ldr	r6, [r4, #0]
 800362e:	1d1d      	adds	r5, r3, #4
 8003630:	6960      	ldr	r0, [r4, #20]
 8003632:	600d      	str	r5, [r1, #0]
 8003634:	0635      	lsls	r5, r6, #24
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	d501      	bpl.n	800363e <_printf_i+0x1ce>
 800363a:	6018      	str	r0, [r3, #0]
 800363c:	e002      	b.n	8003644 <_printf_i+0x1d4>
 800363e:	0671      	lsls	r1, r6, #25
 8003640:	d5fb      	bpl.n	800363a <_printf_i+0x1ca>
 8003642:	8018      	strh	r0, [r3, #0]
 8003644:	2300      	movs	r3, #0
 8003646:	4616      	mov	r6, r2
 8003648:	6123      	str	r3, [r4, #16]
 800364a:	e7ba      	b.n	80035c2 <_printf_i+0x152>
 800364c:	680b      	ldr	r3, [r1, #0]
 800364e:	1d1a      	adds	r2, r3, #4
 8003650:	600a      	str	r2, [r1, #0]
 8003652:	681e      	ldr	r6, [r3, #0]
 8003654:	2100      	movs	r1, #0
 8003656:	4630      	mov	r0, r6
 8003658:	6862      	ldr	r2, [r4, #4]
 800365a:	f000 f82f 	bl	80036bc <memchr>
 800365e:	b108      	cbz	r0, 8003664 <_printf_i+0x1f4>
 8003660:	1b80      	subs	r0, r0, r6
 8003662:	6060      	str	r0, [r4, #4]
 8003664:	6863      	ldr	r3, [r4, #4]
 8003666:	6123      	str	r3, [r4, #16]
 8003668:	2300      	movs	r3, #0
 800366a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800366e:	e7a8      	b.n	80035c2 <_printf_i+0x152>
 8003670:	4632      	mov	r2, r6
 8003672:	4649      	mov	r1, r9
 8003674:	4640      	mov	r0, r8
 8003676:	6923      	ldr	r3, [r4, #16]
 8003678:	47d0      	blx	sl
 800367a:	3001      	adds	r0, #1
 800367c:	d0ab      	beq.n	80035d6 <_printf_i+0x166>
 800367e:	6823      	ldr	r3, [r4, #0]
 8003680:	079b      	lsls	r3, r3, #30
 8003682:	d413      	bmi.n	80036ac <_printf_i+0x23c>
 8003684:	68e0      	ldr	r0, [r4, #12]
 8003686:	9b03      	ldr	r3, [sp, #12]
 8003688:	4298      	cmp	r0, r3
 800368a:	bfb8      	it	lt
 800368c:	4618      	movlt	r0, r3
 800368e:	e7a4      	b.n	80035da <_printf_i+0x16a>
 8003690:	2301      	movs	r3, #1
 8003692:	4632      	mov	r2, r6
 8003694:	4649      	mov	r1, r9
 8003696:	4640      	mov	r0, r8
 8003698:	47d0      	blx	sl
 800369a:	3001      	adds	r0, #1
 800369c:	d09b      	beq.n	80035d6 <_printf_i+0x166>
 800369e:	3501      	adds	r5, #1
 80036a0:	68e3      	ldr	r3, [r4, #12]
 80036a2:	9903      	ldr	r1, [sp, #12]
 80036a4:	1a5b      	subs	r3, r3, r1
 80036a6:	42ab      	cmp	r3, r5
 80036a8:	dcf2      	bgt.n	8003690 <_printf_i+0x220>
 80036aa:	e7eb      	b.n	8003684 <_printf_i+0x214>
 80036ac:	2500      	movs	r5, #0
 80036ae:	f104 0619 	add.w	r6, r4, #25
 80036b2:	e7f5      	b.n	80036a0 <_printf_i+0x230>
 80036b4:	0800410f 	.word	0x0800410f
 80036b8:	08004120 	.word	0x08004120

080036bc <memchr>:
 80036bc:	4603      	mov	r3, r0
 80036be:	b510      	push	{r4, lr}
 80036c0:	b2c9      	uxtb	r1, r1
 80036c2:	4402      	add	r2, r0
 80036c4:	4293      	cmp	r3, r2
 80036c6:	4618      	mov	r0, r3
 80036c8:	d101      	bne.n	80036ce <memchr+0x12>
 80036ca:	2000      	movs	r0, #0
 80036cc:	e003      	b.n	80036d6 <memchr+0x1a>
 80036ce:	7804      	ldrb	r4, [r0, #0]
 80036d0:	3301      	adds	r3, #1
 80036d2:	428c      	cmp	r4, r1
 80036d4:	d1f6      	bne.n	80036c4 <memchr+0x8>
 80036d6:	bd10      	pop	{r4, pc}

080036d8 <_free_r>:
 80036d8:	b538      	push	{r3, r4, r5, lr}
 80036da:	4605      	mov	r5, r0
 80036dc:	2900      	cmp	r1, #0
 80036de:	d043      	beq.n	8003768 <_free_r+0x90>
 80036e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036e4:	1f0c      	subs	r4, r1, #4
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	bfb8      	it	lt
 80036ea:	18e4      	addlt	r4, r4, r3
 80036ec:	f000 f8d0 	bl	8003890 <__malloc_lock>
 80036f0:	4a1e      	ldr	r2, [pc, #120]	; (800376c <_free_r+0x94>)
 80036f2:	6813      	ldr	r3, [r2, #0]
 80036f4:	4610      	mov	r0, r2
 80036f6:	b933      	cbnz	r3, 8003706 <_free_r+0x2e>
 80036f8:	6063      	str	r3, [r4, #4]
 80036fa:	6014      	str	r4, [r2, #0]
 80036fc:	4628      	mov	r0, r5
 80036fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003702:	f000 b8cb 	b.w	800389c <__malloc_unlock>
 8003706:	42a3      	cmp	r3, r4
 8003708:	d90a      	bls.n	8003720 <_free_r+0x48>
 800370a:	6821      	ldr	r1, [r4, #0]
 800370c:	1862      	adds	r2, r4, r1
 800370e:	4293      	cmp	r3, r2
 8003710:	bf01      	itttt	eq
 8003712:	681a      	ldreq	r2, [r3, #0]
 8003714:	685b      	ldreq	r3, [r3, #4]
 8003716:	1852      	addeq	r2, r2, r1
 8003718:	6022      	streq	r2, [r4, #0]
 800371a:	6063      	str	r3, [r4, #4]
 800371c:	6004      	str	r4, [r0, #0]
 800371e:	e7ed      	b.n	80036fc <_free_r+0x24>
 8003720:	461a      	mov	r2, r3
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	b10b      	cbz	r3, 800372a <_free_r+0x52>
 8003726:	42a3      	cmp	r3, r4
 8003728:	d9fa      	bls.n	8003720 <_free_r+0x48>
 800372a:	6811      	ldr	r1, [r2, #0]
 800372c:	1850      	adds	r0, r2, r1
 800372e:	42a0      	cmp	r0, r4
 8003730:	d10b      	bne.n	800374a <_free_r+0x72>
 8003732:	6820      	ldr	r0, [r4, #0]
 8003734:	4401      	add	r1, r0
 8003736:	1850      	adds	r0, r2, r1
 8003738:	4283      	cmp	r3, r0
 800373a:	6011      	str	r1, [r2, #0]
 800373c:	d1de      	bne.n	80036fc <_free_r+0x24>
 800373e:	6818      	ldr	r0, [r3, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	4401      	add	r1, r0
 8003744:	6011      	str	r1, [r2, #0]
 8003746:	6053      	str	r3, [r2, #4]
 8003748:	e7d8      	b.n	80036fc <_free_r+0x24>
 800374a:	d902      	bls.n	8003752 <_free_r+0x7a>
 800374c:	230c      	movs	r3, #12
 800374e:	602b      	str	r3, [r5, #0]
 8003750:	e7d4      	b.n	80036fc <_free_r+0x24>
 8003752:	6820      	ldr	r0, [r4, #0]
 8003754:	1821      	adds	r1, r4, r0
 8003756:	428b      	cmp	r3, r1
 8003758:	bf01      	itttt	eq
 800375a:	6819      	ldreq	r1, [r3, #0]
 800375c:	685b      	ldreq	r3, [r3, #4]
 800375e:	1809      	addeq	r1, r1, r0
 8003760:	6021      	streq	r1, [r4, #0]
 8003762:	6063      	str	r3, [r4, #4]
 8003764:	6054      	str	r4, [r2, #4]
 8003766:	e7c9      	b.n	80036fc <_free_r+0x24>
 8003768:	bd38      	pop	{r3, r4, r5, pc}
 800376a:	bf00      	nop
 800376c:	20000498 	.word	0x20000498

08003770 <_malloc_r>:
 8003770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003772:	1ccd      	adds	r5, r1, #3
 8003774:	f025 0503 	bic.w	r5, r5, #3
 8003778:	3508      	adds	r5, #8
 800377a:	2d0c      	cmp	r5, #12
 800377c:	bf38      	it	cc
 800377e:	250c      	movcc	r5, #12
 8003780:	2d00      	cmp	r5, #0
 8003782:	4606      	mov	r6, r0
 8003784:	db01      	blt.n	800378a <_malloc_r+0x1a>
 8003786:	42a9      	cmp	r1, r5
 8003788:	d903      	bls.n	8003792 <_malloc_r+0x22>
 800378a:	230c      	movs	r3, #12
 800378c:	6033      	str	r3, [r6, #0]
 800378e:	2000      	movs	r0, #0
 8003790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003792:	f000 f87d 	bl	8003890 <__malloc_lock>
 8003796:	4921      	ldr	r1, [pc, #132]	; (800381c <_malloc_r+0xac>)
 8003798:	680a      	ldr	r2, [r1, #0]
 800379a:	4614      	mov	r4, r2
 800379c:	b99c      	cbnz	r4, 80037c6 <_malloc_r+0x56>
 800379e:	4f20      	ldr	r7, [pc, #128]	; (8003820 <_malloc_r+0xb0>)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	b923      	cbnz	r3, 80037ae <_malloc_r+0x3e>
 80037a4:	4621      	mov	r1, r4
 80037a6:	4630      	mov	r0, r6
 80037a8:	f000 f862 	bl	8003870 <_sbrk_r>
 80037ac:	6038      	str	r0, [r7, #0]
 80037ae:	4629      	mov	r1, r5
 80037b0:	4630      	mov	r0, r6
 80037b2:	f000 f85d 	bl	8003870 <_sbrk_r>
 80037b6:	1c43      	adds	r3, r0, #1
 80037b8:	d123      	bne.n	8003802 <_malloc_r+0x92>
 80037ba:	230c      	movs	r3, #12
 80037bc:	4630      	mov	r0, r6
 80037be:	6033      	str	r3, [r6, #0]
 80037c0:	f000 f86c 	bl	800389c <__malloc_unlock>
 80037c4:	e7e3      	b.n	800378e <_malloc_r+0x1e>
 80037c6:	6823      	ldr	r3, [r4, #0]
 80037c8:	1b5b      	subs	r3, r3, r5
 80037ca:	d417      	bmi.n	80037fc <_malloc_r+0x8c>
 80037cc:	2b0b      	cmp	r3, #11
 80037ce:	d903      	bls.n	80037d8 <_malloc_r+0x68>
 80037d0:	6023      	str	r3, [r4, #0]
 80037d2:	441c      	add	r4, r3
 80037d4:	6025      	str	r5, [r4, #0]
 80037d6:	e004      	b.n	80037e2 <_malloc_r+0x72>
 80037d8:	6863      	ldr	r3, [r4, #4]
 80037da:	42a2      	cmp	r2, r4
 80037dc:	bf0c      	ite	eq
 80037de:	600b      	streq	r3, [r1, #0]
 80037e0:	6053      	strne	r3, [r2, #4]
 80037e2:	4630      	mov	r0, r6
 80037e4:	f000 f85a 	bl	800389c <__malloc_unlock>
 80037e8:	f104 000b 	add.w	r0, r4, #11
 80037ec:	1d23      	adds	r3, r4, #4
 80037ee:	f020 0007 	bic.w	r0, r0, #7
 80037f2:	1ac2      	subs	r2, r0, r3
 80037f4:	d0cc      	beq.n	8003790 <_malloc_r+0x20>
 80037f6:	1a1b      	subs	r3, r3, r0
 80037f8:	50a3      	str	r3, [r4, r2]
 80037fa:	e7c9      	b.n	8003790 <_malloc_r+0x20>
 80037fc:	4622      	mov	r2, r4
 80037fe:	6864      	ldr	r4, [r4, #4]
 8003800:	e7cc      	b.n	800379c <_malloc_r+0x2c>
 8003802:	1cc4      	adds	r4, r0, #3
 8003804:	f024 0403 	bic.w	r4, r4, #3
 8003808:	42a0      	cmp	r0, r4
 800380a:	d0e3      	beq.n	80037d4 <_malloc_r+0x64>
 800380c:	1a21      	subs	r1, r4, r0
 800380e:	4630      	mov	r0, r6
 8003810:	f000 f82e 	bl	8003870 <_sbrk_r>
 8003814:	3001      	adds	r0, #1
 8003816:	d1dd      	bne.n	80037d4 <_malloc_r+0x64>
 8003818:	e7cf      	b.n	80037ba <_malloc_r+0x4a>
 800381a:	bf00      	nop
 800381c:	20000498 	.word	0x20000498
 8003820:	2000049c 	.word	0x2000049c

08003824 <_realloc_r>:
 8003824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003826:	4607      	mov	r7, r0
 8003828:	4614      	mov	r4, r2
 800382a:	460e      	mov	r6, r1
 800382c:	b921      	cbnz	r1, 8003838 <_realloc_r+0x14>
 800382e:	4611      	mov	r1, r2
 8003830:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003834:	f7ff bf9c 	b.w	8003770 <_malloc_r>
 8003838:	b922      	cbnz	r2, 8003844 <_realloc_r+0x20>
 800383a:	f7ff ff4d 	bl	80036d8 <_free_r>
 800383e:	4625      	mov	r5, r4
 8003840:	4628      	mov	r0, r5
 8003842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003844:	f000 f830 	bl	80038a8 <_malloc_usable_size_r>
 8003848:	42a0      	cmp	r0, r4
 800384a:	d20f      	bcs.n	800386c <_realloc_r+0x48>
 800384c:	4621      	mov	r1, r4
 800384e:	4638      	mov	r0, r7
 8003850:	f7ff ff8e 	bl	8003770 <_malloc_r>
 8003854:	4605      	mov	r5, r0
 8003856:	2800      	cmp	r0, #0
 8003858:	d0f2      	beq.n	8003840 <_realloc_r+0x1c>
 800385a:	4631      	mov	r1, r6
 800385c:	4622      	mov	r2, r4
 800385e:	f7ff fbeb 	bl	8003038 <memcpy>
 8003862:	4631      	mov	r1, r6
 8003864:	4638      	mov	r0, r7
 8003866:	f7ff ff37 	bl	80036d8 <_free_r>
 800386a:	e7e9      	b.n	8003840 <_realloc_r+0x1c>
 800386c:	4635      	mov	r5, r6
 800386e:	e7e7      	b.n	8003840 <_realloc_r+0x1c>

08003870 <_sbrk_r>:
 8003870:	b538      	push	{r3, r4, r5, lr}
 8003872:	2300      	movs	r3, #0
 8003874:	4d05      	ldr	r5, [pc, #20]	; (800388c <_sbrk_r+0x1c>)
 8003876:	4604      	mov	r4, r0
 8003878:	4608      	mov	r0, r1
 800387a:	602b      	str	r3, [r5, #0]
 800387c:	f7fd fa08 	bl	8000c90 <_sbrk>
 8003880:	1c43      	adds	r3, r0, #1
 8003882:	d102      	bne.n	800388a <_sbrk_r+0x1a>
 8003884:	682b      	ldr	r3, [r5, #0]
 8003886:	b103      	cbz	r3, 800388a <_sbrk_r+0x1a>
 8003888:	6023      	str	r3, [r4, #0]
 800388a:	bd38      	pop	{r3, r4, r5, pc}
 800388c:	2000058c 	.word	0x2000058c

08003890 <__malloc_lock>:
 8003890:	4801      	ldr	r0, [pc, #4]	; (8003898 <__malloc_lock+0x8>)
 8003892:	f000 b811 	b.w	80038b8 <__retarget_lock_acquire_recursive>
 8003896:	bf00      	nop
 8003898:	20000594 	.word	0x20000594

0800389c <__malloc_unlock>:
 800389c:	4801      	ldr	r0, [pc, #4]	; (80038a4 <__malloc_unlock+0x8>)
 800389e:	f000 b80c 	b.w	80038ba <__retarget_lock_release_recursive>
 80038a2:	bf00      	nop
 80038a4:	20000594 	.word	0x20000594

080038a8 <_malloc_usable_size_r>:
 80038a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038ac:	1f18      	subs	r0, r3, #4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	bfbc      	itt	lt
 80038b2:	580b      	ldrlt	r3, [r1, r0]
 80038b4:	18c0      	addlt	r0, r0, r3
 80038b6:	4770      	bx	lr

080038b8 <__retarget_lock_acquire_recursive>:
 80038b8:	4770      	bx	lr

080038ba <__retarget_lock_release_recursive>:
 80038ba:	4770      	bx	lr

080038bc <_init>:
 80038bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038be:	bf00      	nop
 80038c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038c2:	bc08      	pop	{r3}
 80038c4:	469e      	mov	lr, r3
 80038c6:	4770      	bx	lr

080038c8 <_fini>:
 80038c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ca:	bf00      	nop
 80038cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ce:	bc08      	pop	{r3}
 80038d0:	469e      	mov	lr, r3
 80038d2:	4770      	bx	lr
